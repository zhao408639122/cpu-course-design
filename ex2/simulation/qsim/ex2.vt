// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/10/2020 20:12:45"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    ex2
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ex2_vlg_sample_tst(
	CLK,
	CLR,
	sampler_tx
);
input  CLK;
input  CLR;
output sampler_tx;

reg sample;
time current_time;
always @(CLK or CLR)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module ex2_vlg_check_tst (
	test1,
	test2,
	test3,
	test4,
	sampler_rx
);
input [7:0] test1;
input [7:0] test2;
input [7:0] test3;
input [7:0] test4;
input sampler_rx;

reg [7:0] test1_expected;
reg [7:0] test2_expected;
reg [7:0] test3_expected;
reg [7:0] test4_expected;

reg [7:0] test1_prev;
reg [7:0] test2_prev;
reg [7:0] test3_prev;
reg [7:0] test4_prev;

reg [7:0] test1_expected_prev;
reg [7:0] test2_expected_prev;
reg [7:0] test3_expected_prev;
reg [7:0] test4_expected_prev;

reg [7:0] last_test1_exp;
reg [7:0] last_test2_exp;
reg [7:0] last_test3_exp;
reg [7:0] last_test4_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:4] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 4'b1;
end

// update real /o prevs

always @(trigger)
begin
	test1_prev = test1;
	test2_prev = test2;
	test3_prev = test3;
	test4_prev = test4;
end

// update expected /o prevs

always @(trigger)
begin
	test1_expected_prev = test1_expected;
	test2_expected_prev = test2_expected;
	test3_expected_prev = test3_expected;
	test4_expected_prev = test4_expected;
end


// expected test1[ 7 ]
initial
begin
	test1_expected[7] = 1'bX;
end 
// expected test1[ 6 ]
initial
begin
	test1_expected[6] = 1'bX;
end 
// expected test1[ 5 ]
initial
begin
	test1_expected[5] = 1'bX;
end 
// expected test1[ 4 ]
initial
begin
	test1_expected[4] = 1'bX;
end 
// expected test1[ 3 ]
initial
begin
	test1_expected[3] = 1'bX;
end 
// expected test1[ 2 ]
initial
begin
	test1_expected[2] = 1'bX;
end 
// expected test1[ 1 ]
initial
begin
	test1_expected[1] = 1'bX;
end 
// expected test1[ 0 ]
initial
begin
	test1_expected[0] = 1'bX;
end 
// expected test2[ 7 ]
initial
begin
	test2_expected[7] = 1'bX;
end 
// expected test2[ 6 ]
initial
begin
	test2_expected[6] = 1'bX;
end 
// expected test2[ 5 ]
initial
begin
	test2_expected[5] = 1'bX;
end 
// expected test2[ 4 ]
initial
begin
	test2_expected[4] = 1'bX;
end 
// expected test2[ 3 ]
initial
begin
	test2_expected[3] = 1'bX;
end 
// expected test2[ 2 ]
initial
begin
	test2_expected[2] = 1'bX;
end 
// expected test2[ 1 ]
initial
begin
	test2_expected[1] = 1'bX;
end 
// expected test2[ 0 ]
initial
begin
	test2_expected[0] = 1'bX;
end 
// expected test3[ 7 ]
initial
begin
	test3_expected[7] = 1'bX;
end 
// expected test3[ 6 ]
initial
begin
	test3_expected[6] = 1'bX;
end 
// expected test3[ 5 ]
initial
begin
	test3_expected[5] = 1'bX;
end 
// expected test3[ 4 ]
initial
begin
	test3_expected[4] = 1'bX;
end 
// expected test3[ 3 ]
initial
begin
	test3_expected[3] = 1'bX;
end 
// expected test3[ 2 ]
initial
begin
	test3_expected[2] = 1'bX;
end 
// expected test3[ 1 ]
initial
begin
	test3_expected[1] = 1'bX;
end 
// expected test3[ 0 ]
initial
begin
	test3_expected[0] = 1'bX;
end 
// expected test4[ 7 ]
initial
begin
	test4_expected[7] = 1'bX;
end 
// expected test4[ 6 ]
initial
begin
	test4_expected[6] = 1'bX;
end 
// expected test4[ 5 ]
initial
begin
	test4_expected[5] = 1'bX;
end 
// expected test4[ 4 ]
initial
begin
	test4_expected[4] = 1'bX;
end 
// expected test4[ 3 ]
initial
begin
	test4_expected[3] = 1'bX;
end 
// expected test4[ 2 ]
initial
begin
	test4_expected[2] = 1'bX;
end 
// expected test4[ 1 ]
initial
begin
	test4_expected[1] = 1'bX;
end 
// expected test4[ 0 ]
initial
begin
	test4_expected[0] = 1'bX;
end 
// generate trigger
always @(test1_expected or test1 or test2_expected or test2 or test3_expected or test3 or test4_expected or test4)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected test1 = %b | expected test2 = %b | expected test3 = %b | expected test4 = %b | ",test1_expected_prev,test2_expected_prev,test3_expected_prev,test4_expected_prev);
	$display("| real test1 = %b | real test2 = %b | real test3 = %b | real test4 = %b | ",test1_prev,test2_prev,test3_prev,test4_prev);
`endif
	if (
		( test1_expected_prev[0] !== 1'bx ) && ( test1_prev[0] !== test1_expected_prev[0] )
		&& ((test1_expected_prev[0] !== last_test1_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test1_expected_prev);
		$display ("     Real value = %b", test1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_test1_exp[0] = test1_expected_prev[0];
	end
	if (
		( test1_expected_prev[1] !== 1'bx ) && ( test1_prev[1] !== test1_expected_prev[1] )
		&& ((test1_expected_prev[1] !== last_test1_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test1_expected_prev);
		$display ("     Real value = %b", test1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_test1_exp[1] = test1_expected_prev[1];
	end
	if (
		( test1_expected_prev[2] !== 1'bx ) && ( test1_prev[2] !== test1_expected_prev[2] )
		&& ((test1_expected_prev[2] !== last_test1_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test1_expected_prev);
		$display ("     Real value = %b", test1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_test1_exp[2] = test1_expected_prev[2];
	end
	if (
		( test1_expected_prev[3] !== 1'bx ) && ( test1_prev[3] !== test1_expected_prev[3] )
		&& ((test1_expected_prev[3] !== last_test1_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test1_expected_prev);
		$display ("     Real value = %b", test1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_test1_exp[3] = test1_expected_prev[3];
	end
	if (
		( test1_expected_prev[4] !== 1'bx ) && ( test1_prev[4] !== test1_expected_prev[4] )
		&& ((test1_expected_prev[4] !== last_test1_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test1_expected_prev);
		$display ("     Real value = %b", test1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_test1_exp[4] = test1_expected_prev[4];
	end
	if (
		( test1_expected_prev[5] !== 1'bx ) && ( test1_prev[5] !== test1_expected_prev[5] )
		&& ((test1_expected_prev[5] !== last_test1_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test1_expected_prev);
		$display ("     Real value = %b", test1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_test1_exp[5] = test1_expected_prev[5];
	end
	if (
		( test1_expected_prev[6] !== 1'bx ) && ( test1_prev[6] !== test1_expected_prev[6] )
		&& ((test1_expected_prev[6] !== last_test1_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test1_expected_prev);
		$display ("     Real value = %b", test1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_test1_exp[6] = test1_expected_prev[6];
	end
	if (
		( test1_expected_prev[7] !== 1'bx ) && ( test1_prev[7] !== test1_expected_prev[7] )
		&& ((test1_expected_prev[7] !== last_test1_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test1[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test1_expected_prev);
		$display ("     Real value = %b", test1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_test1_exp[7] = test1_expected_prev[7];
	end
	if (
		( test2_expected_prev[0] !== 1'bx ) && ( test2_prev[0] !== test2_expected_prev[0] )
		&& ((test2_expected_prev[0] !== last_test2_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test2_expected_prev);
		$display ("     Real value = %b", test2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_test2_exp[0] = test2_expected_prev[0];
	end
	if (
		( test2_expected_prev[1] !== 1'bx ) && ( test2_prev[1] !== test2_expected_prev[1] )
		&& ((test2_expected_prev[1] !== last_test2_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test2_expected_prev);
		$display ("     Real value = %b", test2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_test2_exp[1] = test2_expected_prev[1];
	end
	if (
		( test2_expected_prev[2] !== 1'bx ) && ( test2_prev[2] !== test2_expected_prev[2] )
		&& ((test2_expected_prev[2] !== last_test2_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test2_expected_prev);
		$display ("     Real value = %b", test2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_test2_exp[2] = test2_expected_prev[2];
	end
	if (
		( test2_expected_prev[3] !== 1'bx ) && ( test2_prev[3] !== test2_expected_prev[3] )
		&& ((test2_expected_prev[3] !== last_test2_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test2_expected_prev);
		$display ("     Real value = %b", test2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_test2_exp[3] = test2_expected_prev[3];
	end
	if (
		( test2_expected_prev[4] !== 1'bx ) && ( test2_prev[4] !== test2_expected_prev[4] )
		&& ((test2_expected_prev[4] !== last_test2_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test2_expected_prev);
		$display ("     Real value = %b", test2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_test2_exp[4] = test2_expected_prev[4];
	end
	if (
		( test2_expected_prev[5] !== 1'bx ) && ( test2_prev[5] !== test2_expected_prev[5] )
		&& ((test2_expected_prev[5] !== last_test2_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test2_expected_prev);
		$display ("     Real value = %b", test2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_test2_exp[5] = test2_expected_prev[5];
	end
	if (
		( test2_expected_prev[6] !== 1'bx ) && ( test2_prev[6] !== test2_expected_prev[6] )
		&& ((test2_expected_prev[6] !== last_test2_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test2_expected_prev);
		$display ("     Real value = %b", test2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_test2_exp[6] = test2_expected_prev[6];
	end
	if (
		( test2_expected_prev[7] !== 1'bx ) && ( test2_prev[7] !== test2_expected_prev[7] )
		&& ((test2_expected_prev[7] !== last_test2_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test2[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test2_expected_prev);
		$display ("     Real value = %b", test2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_test2_exp[7] = test2_expected_prev[7];
	end
	if (
		( test3_expected_prev[0] !== 1'bx ) && ( test3_prev[0] !== test3_expected_prev[0] )
		&& ((test3_expected_prev[0] !== last_test3_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test3[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test3_expected_prev);
		$display ("     Real value = %b", test3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_test3_exp[0] = test3_expected_prev[0];
	end
	if (
		( test3_expected_prev[1] !== 1'bx ) && ( test3_prev[1] !== test3_expected_prev[1] )
		&& ((test3_expected_prev[1] !== last_test3_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test3[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test3_expected_prev);
		$display ("     Real value = %b", test3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_test3_exp[1] = test3_expected_prev[1];
	end
	if (
		( test3_expected_prev[2] !== 1'bx ) && ( test3_prev[2] !== test3_expected_prev[2] )
		&& ((test3_expected_prev[2] !== last_test3_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test3[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test3_expected_prev);
		$display ("     Real value = %b", test3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_test3_exp[2] = test3_expected_prev[2];
	end
	if (
		( test3_expected_prev[3] !== 1'bx ) && ( test3_prev[3] !== test3_expected_prev[3] )
		&& ((test3_expected_prev[3] !== last_test3_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test3[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test3_expected_prev);
		$display ("     Real value = %b", test3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_test3_exp[3] = test3_expected_prev[3];
	end
	if (
		( test3_expected_prev[4] !== 1'bx ) && ( test3_prev[4] !== test3_expected_prev[4] )
		&& ((test3_expected_prev[4] !== last_test3_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test3[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test3_expected_prev);
		$display ("     Real value = %b", test3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_test3_exp[4] = test3_expected_prev[4];
	end
	if (
		( test3_expected_prev[5] !== 1'bx ) && ( test3_prev[5] !== test3_expected_prev[5] )
		&& ((test3_expected_prev[5] !== last_test3_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test3[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test3_expected_prev);
		$display ("     Real value = %b", test3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_test3_exp[5] = test3_expected_prev[5];
	end
	if (
		( test3_expected_prev[6] !== 1'bx ) && ( test3_prev[6] !== test3_expected_prev[6] )
		&& ((test3_expected_prev[6] !== last_test3_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test3[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test3_expected_prev);
		$display ("     Real value = %b", test3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_test3_exp[6] = test3_expected_prev[6];
	end
	if (
		( test3_expected_prev[7] !== 1'bx ) && ( test3_prev[7] !== test3_expected_prev[7] )
		&& ((test3_expected_prev[7] !== last_test3_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test3[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test3_expected_prev);
		$display ("     Real value = %b", test3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_test3_exp[7] = test3_expected_prev[7];
	end
	if (
		( test4_expected_prev[0] !== 1'bx ) && ( test4_prev[0] !== test4_expected_prev[0] )
		&& ((test4_expected_prev[0] !== last_test4_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test4[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test4_expected_prev);
		$display ("     Real value = %b", test4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_test4_exp[0] = test4_expected_prev[0];
	end
	if (
		( test4_expected_prev[1] !== 1'bx ) && ( test4_prev[1] !== test4_expected_prev[1] )
		&& ((test4_expected_prev[1] !== last_test4_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test4[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test4_expected_prev);
		$display ("     Real value = %b", test4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_test4_exp[1] = test4_expected_prev[1];
	end
	if (
		( test4_expected_prev[2] !== 1'bx ) && ( test4_prev[2] !== test4_expected_prev[2] )
		&& ((test4_expected_prev[2] !== last_test4_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test4[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test4_expected_prev);
		$display ("     Real value = %b", test4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_test4_exp[2] = test4_expected_prev[2];
	end
	if (
		( test4_expected_prev[3] !== 1'bx ) && ( test4_prev[3] !== test4_expected_prev[3] )
		&& ((test4_expected_prev[3] !== last_test4_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test4[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test4_expected_prev);
		$display ("     Real value = %b", test4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_test4_exp[3] = test4_expected_prev[3];
	end
	if (
		( test4_expected_prev[4] !== 1'bx ) && ( test4_prev[4] !== test4_expected_prev[4] )
		&& ((test4_expected_prev[4] !== last_test4_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test4[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test4_expected_prev);
		$display ("     Real value = %b", test4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_test4_exp[4] = test4_expected_prev[4];
	end
	if (
		( test4_expected_prev[5] !== 1'bx ) && ( test4_prev[5] !== test4_expected_prev[5] )
		&& ((test4_expected_prev[5] !== last_test4_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test4[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test4_expected_prev);
		$display ("     Real value = %b", test4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_test4_exp[5] = test4_expected_prev[5];
	end
	if (
		( test4_expected_prev[6] !== 1'bx ) && ( test4_prev[6] !== test4_expected_prev[6] )
		&& ((test4_expected_prev[6] !== last_test4_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test4[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test4_expected_prev);
		$display ("     Real value = %b", test4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_test4_exp[6] = test4_expected_prev[6];
	end
	if (
		( test4_expected_prev[7] !== 1'bx ) && ( test4_prev[7] !== test4_expected_prev[7] )
		&& ((test4_expected_prev[7] !== last_test4_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test4[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test4_expected_prev);
		$display ("     Real value = %b", test4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_test4_exp[7] = test4_expected_prev[7];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module ex2_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK;
reg CLR;
// wires                                               
wire [7:0] test1;
wire [7:0] test2;
wire [7:0] test3;
wire [7:0] test4;

wire sampler;                             

// assign statements (if any)                          
ex2 i1 (
// port map - connection between master ports and signals/registers   
	.CLK(CLK),
	.CLR(CLR),
	.test1(test1),
	.test2(test2),
	.test3(test3),
	.test4(test4)
);

// CLK
always
begin
	CLK = 1'b0;
	CLK = #20000 1'b1;
	#20000;
end 

// CLR
initial
begin
	CLR = 1'b1;
end 

ex2_vlg_sample_tst tb_sample (
	.CLK(CLK),
	.CLR(CLR),
	.sampler_tx(sampler)
);

ex2_vlg_check_tst tb_out(
	.test1(test1),
	.test2(test2),
	.test3(test3),
	.test4(test4),
	.sampler_rx(sampler)
);
endmodule

