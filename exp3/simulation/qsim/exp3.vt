// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "07/04/2020 02:31:30"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    exp3
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module exp3_vlg_sample_tst(
	CLK,
	ON,
	PUL,
	sampler_tx
);
input  CLK;
input  ON;
input  PUL;
output sampler_tx;

reg sample;
time current_time;
always @(CLK or ON or PUL)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module exp3_vlg_check_tst (
	INS,
	MAR_DATA,
	PC_DATA,
	R0_DATA,
	R1_DATA,
	RA_INPUT,
	RAM_ADDR,
	RAM_RDDATA,
	RAM_WRDATA,
	RB_INPUT,
	T1,
	T2,
	T3,
	T4,
	sampler_rx
);
input [31:0] INS;
input [7:0] MAR_DATA;
input [7:0] PC_DATA;
input [7:0] R0_DATA;
input [7:0] R1_DATA;
input [7:0] RA_INPUT;
input [7:0] RAM_ADDR;
input [7:0] RAM_RDDATA;
input [7:0] RAM_WRDATA;
input [7:0] RB_INPUT;
input  T1;
input  T2;
input  T3;
input  T4;
input sampler_rx;

reg [31:0] INS_expected;
reg [7:0] MAR_DATA_expected;
reg [7:0] PC_DATA_expected;
reg [7:0] R0_DATA_expected;
reg [7:0] R1_DATA_expected;
reg [7:0] RA_INPUT_expected;
reg [7:0] RAM_ADDR_expected;
reg [7:0] RAM_RDDATA_expected;
reg [7:0] RAM_WRDATA_expected;
reg [7:0] RB_INPUT_expected;
reg  T1_expected;
reg  T2_expected;
reg  T3_expected;
reg  T4_expected;

reg [31:0] INS_prev;
reg [7:0] MAR_DATA_prev;
reg [7:0] PC_DATA_prev;
reg [7:0] R0_DATA_prev;
reg [7:0] R1_DATA_prev;
reg [7:0] RA_INPUT_prev;
reg [7:0] RAM_ADDR_prev;
reg [7:0] RAM_RDDATA_prev;
reg [7:0] RAM_WRDATA_prev;
reg [7:0] RB_INPUT_prev;
reg  T1_prev;
reg  T2_prev;
reg  T3_prev;
reg  T4_prev;

reg [31:0] INS_expected_prev;
reg [7:0] MAR_DATA_expected_prev;
reg [7:0] PC_DATA_expected_prev;
reg [7:0] R0_DATA_expected_prev;
reg [7:0] R1_DATA_expected_prev;
reg [7:0] RA_INPUT_expected_prev;
reg [7:0] RAM_ADDR_expected_prev;
reg [7:0] RAM_RDDATA_expected_prev;
reg [7:0] RAM_WRDATA_expected_prev;
reg [7:0] RB_INPUT_expected_prev;
reg  T1_expected_prev;
reg  T2_expected_prev;
reg  T3_expected_prev;
reg  T4_expected_prev;

reg [31:0] last_INS_exp;
reg [7:0] last_MAR_DATA_exp;
reg [7:0] last_PC_DATA_exp;
reg [7:0] last_R0_DATA_exp;
reg [7:0] last_R1_DATA_exp;
reg [7:0] last_RA_INPUT_exp;
reg [7:0] last_RAM_ADDR_exp;
reg [7:0] last_RAM_RDDATA_exp;
reg [7:0] last_RAM_WRDATA_exp;
reg [7:0] last_RB_INPUT_exp;
reg  last_T1_exp;
reg  last_T2_exp;
reg  last_T3_exp;
reg  last_T4_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:14] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 14'b1;
end

// update real /o prevs

always @(trigger)
begin
	INS_prev = INS;
	MAR_DATA_prev = MAR_DATA;
	PC_DATA_prev = PC_DATA;
	R0_DATA_prev = R0_DATA;
	R1_DATA_prev = R1_DATA;
	RA_INPUT_prev = RA_INPUT;
	RAM_ADDR_prev = RAM_ADDR;
	RAM_RDDATA_prev = RAM_RDDATA;
	RAM_WRDATA_prev = RAM_WRDATA;
	RB_INPUT_prev = RB_INPUT;
	T1_prev = T1;
	T2_prev = T2;
	T3_prev = T3;
	T4_prev = T4;
end

// update expected /o prevs

always @(trigger)
begin
	INS_expected_prev = INS_expected;
	MAR_DATA_expected_prev = MAR_DATA_expected;
	PC_DATA_expected_prev = PC_DATA_expected;
	R0_DATA_expected_prev = R0_DATA_expected;
	R1_DATA_expected_prev = R1_DATA_expected;
	RA_INPUT_expected_prev = RA_INPUT_expected;
	RAM_ADDR_expected_prev = RAM_ADDR_expected;
	RAM_RDDATA_expected_prev = RAM_RDDATA_expected;
	RAM_WRDATA_expected_prev = RAM_WRDATA_expected;
	RB_INPUT_expected_prev = RB_INPUT_expected;
	T1_expected_prev = T1_expected;
	T2_expected_prev = T2_expected;
	T3_expected_prev = T3_expected;
	T4_expected_prev = T4_expected;
end


// expected MAR_DATA[ 7 ]
initial
begin
	MAR_DATA_expected[7] = 1'bX;
end 
// expected MAR_DATA[ 6 ]
initial
begin
	MAR_DATA_expected[6] = 1'bX;
end 
// expected MAR_DATA[ 5 ]
initial
begin
	MAR_DATA_expected[5] = 1'bX;
end 
// expected MAR_DATA[ 4 ]
initial
begin
	MAR_DATA_expected[4] = 1'bX;
end 
// expected MAR_DATA[ 3 ]
initial
begin
	MAR_DATA_expected[3] = 1'bX;
end 
// expected MAR_DATA[ 2 ]
initial
begin
	MAR_DATA_expected[2] = 1'bX;
end 
// expected MAR_DATA[ 1 ]
initial
begin
	MAR_DATA_expected[1] = 1'bX;
end 
// expected MAR_DATA[ 0 ]
initial
begin
	MAR_DATA_expected[0] = 1'bX;
end 
// expected PC_DATA[ 7 ]
initial
begin
	PC_DATA_expected[7] = 1'bX;
end 
// expected PC_DATA[ 6 ]
initial
begin
	PC_DATA_expected[6] = 1'bX;
end 
// expected PC_DATA[ 5 ]
initial
begin
	PC_DATA_expected[5] = 1'bX;
end 
// expected PC_DATA[ 4 ]
initial
begin
	PC_DATA_expected[4] = 1'bX;
end 
// expected PC_DATA[ 3 ]
initial
begin
	PC_DATA_expected[3] = 1'bX;
end 
// expected PC_DATA[ 2 ]
initial
begin
	PC_DATA_expected[2] = 1'bX;
end 
// expected PC_DATA[ 1 ]
initial
begin
	PC_DATA_expected[1] = 1'bX;
end 
// expected PC_DATA[ 0 ]
initial
begin
	PC_DATA_expected[0] = 1'bX;
end 
// expected R0_DATA[ 7 ]
initial
begin
	R0_DATA_expected[7] = 1'bX;
end 
// expected R0_DATA[ 6 ]
initial
begin
	R0_DATA_expected[6] = 1'bX;
end 
// expected R0_DATA[ 5 ]
initial
begin
	R0_DATA_expected[5] = 1'bX;
end 
// expected R0_DATA[ 4 ]
initial
begin
	R0_DATA_expected[4] = 1'bX;
end 
// expected R0_DATA[ 3 ]
initial
begin
	R0_DATA_expected[3] = 1'bX;
end 
// expected R0_DATA[ 2 ]
initial
begin
	R0_DATA_expected[2] = 1'bX;
end 
// expected R0_DATA[ 1 ]
initial
begin
	R0_DATA_expected[1] = 1'bX;
end 
// expected R0_DATA[ 0 ]
initial
begin
	R0_DATA_expected[0] = 1'bX;
end 
// expected R1_DATA[ 7 ]
initial
begin
	R1_DATA_expected[7] = 1'bX;
end 
// expected R1_DATA[ 6 ]
initial
begin
	R1_DATA_expected[6] = 1'bX;
end 
// expected R1_DATA[ 5 ]
initial
begin
	R1_DATA_expected[5] = 1'bX;
end 
// expected R1_DATA[ 4 ]
initial
begin
	R1_DATA_expected[4] = 1'bX;
end 
// expected R1_DATA[ 3 ]
initial
begin
	R1_DATA_expected[3] = 1'bX;
end 
// expected R1_DATA[ 2 ]
initial
begin
	R1_DATA_expected[2] = 1'bX;
end 
// expected R1_DATA[ 1 ]
initial
begin
	R1_DATA_expected[1] = 1'bX;
end 
// expected R1_DATA[ 0 ]
initial
begin
	R1_DATA_expected[0] = 1'bX;
end 
// expected RAM_ADDR[ 7 ]
initial
begin
	RAM_ADDR_expected[7] = 1'bX;
end 
// expected RAM_ADDR[ 6 ]
initial
begin
	RAM_ADDR_expected[6] = 1'bX;
end 
// expected RAM_ADDR[ 5 ]
initial
begin
	RAM_ADDR_expected[5] = 1'bX;
end 
// expected RAM_ADDR[ 4 ]
initial
begin
	RAM_ADDR_expected[4] = 1'bX;
end 
// expected RAM_ADDR[ 3 ]
initial
begin
	RAM_ADDR_expected[3] = 1'bX;
end 
// expected RAM_ADDR[ 2 ]
initial
begin
	RAM_ADDR_expected[2] = 1'bX;
end 
// expected RAM_ADDR[ 1 ]
initial
begin
	RAM_ADDR_expected[1] = 1'bX;
end 
// expected RAM_ADDR[ 0 ]
initial
begin
	RAM_ADDR_expected[0] = 1'bX;
end 
// expected RAM_RDDATA[ 7 ]
initial
begin
	RAM_RDDATA_expected[7] = 1'bX;
end 
// expected RAM_RDDATA[ 6 ]
initial
begin
	RAM_RDDATA_expected[6] = 1'bX;
end 
// expected RAM_RDDATA[ 5 ]
initial
begin
	RAM_RDDATA_expected[5] = 1'bX;
end 
// expected RAM_RDDATA[ 4 ]
initial
begin
	RAM_RDDATA_expected[4] = 1'bX;
end 
// expected RAM_RDDATA[ 3 ]
initial
begin
	RAM_RDDATA_expected[3] = 1'bX;
end 
// expected RAM_RDDATA[ 2 ]
initial
begin
	RAM_RDDATA_expected[2] = 1'bX;
end 
// expected RAM_RDDATA[ 1 ]
initial
begin
	RAM_RDDATA_expected[1] = 1'bX;
end 
// expected RAM_RDDATA[ 0 ]
initial
begin
	RAM_RDDATA_expected[0] = 1'bX;
end 

// expected T1
initial
begin
	T1_expected = 1'bX;
end 

// expected T2
initial
begin
	T2_expected = 1'bX;
end 

// expected T3
initial
begin
	T3_expected = 1'bX;
end 

// expected T4
initial
begin
	T4_expected = 1'bX;
end 
// expected INS[ 31 ]
initial
begin
	INS_expected[31] = 1'bX;
end 
// expected INS[ 30 ]
initial
begin
	INS_expected[30] = 1'bX;
end 
// expected INS[ 29 ]
initial
begin
	INS_expected[29] = 1'bX;
end 
// expected INS[ 28 ]
initial
begin
	INS_expected[28] = 1'bX;
end 
// expected INS[ 27 ]
initial
begin
	INS_expected[27] = 1'bX;
end 
// expected INS[ 26 ]
initial
begin
	INS_expected[26] = 1'bX;
end 
// expected INS[ 25 ]
initial
begin
	INS_expected[25] = 1'bX;
end 
// expected INS[ 24 ]
initial
begin
	INS_expected[24] = 1'bX;
end 
// expected INS[ 23 ]
initial
begin
	INS_expected[23] = 1'bX;
end 
// expected INS[ 22 ]
initial
begin
	INS_expected[22] = 1'bX;
end 
// expected INS[ 21 ]
initial
begin
	INS_expected[21] = 1'bX;
end 
// expected INS[ 20 ]
initial
begin
	INS_expected[20] = 1'bX;
end 
// expected INS[ 19 ]
initial
begin
	INS_expected[19] = 1'bX;
end 
// expected INS[ 18 ]
initial
begin
	INS_expected[18] = 1'bX;
end 
// expected INS[ 17 ]
initial
begin
	INS_expected[17] = 1'bX;
end 
// expected INS[ 16 ]
initial
begin
	INS_expected[16] = 1'bX;
end 
// expected INS[ 15 ]
initial
begin
	INS_expected[15] = 1'bX;
end 
// expected INS[ 14 ]
initial
begin
	INS_expected[14] = 1'bX;
end 
// expected INS[ 13 ]
initial
begin
	INS_expected[13] = 1'bX;
end 
// expected INS[ 12 ]
initial
begin
	INS_expected[12] = 1'bX;
end 
// expected INS[ 11 ]
initial
begin
	INS_expected[11] = 1'bX;
end 
// expected INS[ 10 ]
initial
begin
	INS_expected[10] = 1'bX;
end 
// expected INS[ 9 ]
initial
begin
	INS_expected[9] = 1'bX;
end 
// expected INS[ 8 ]
initial
begin
	INS_expected[8] = 1'bX;
end 
// expected INS[ 7 ]
initial
begin
	INS_expected[7] = 1'bX;
end 
// expected INS[ 6 ]
initial
begin
	INS_expected[6] = 1'bX;
end 
// expected INS[ 5 ]
initial
begin
	INS_expected[5] = 1'bX;
end 
// expected INS[ 4 ]
initial
begin
	INS_expected[4] = 1'bX;
end 
// expected INS[ 3 ]
initial
begin
	INS_expected[3] = 1'bX;
end 
// expected INS[ 2 ]
initial
begin
	INS_expected[2] = 1'bX;
end 
// expected INS[ 1 ]
initial
begin
	INS_expected[1] = 1'bX;
end 
// expected INS[ 0 ]
initial
begin
	INS_expected[0] = 1'bX;
end 
// expected RA_INPUT[ 7 ]
initial
begin
	RA_INPUT_expected[7] = 1'bX;
end 
// expected RA_INPUT[ 6 ]
initial
begin
	RA_INPUT_expected[6] = 1'bX;
end 
// expected RA_INPUT[ 5 ]
initial
begin
	RA_INPUT_expected[5] = 1'bX;
end 
// expected RA_INPUT[ 4 ]
initial
begin
	RA_INPUT_expected[4] = 1'bX;
end 
// expected RA_INPUT[ 3 ]
initial
begin
	RA_INPUT_expected[3] = 1'bX;
end 
// expected RA_INPUT[ 2 ]
initial
begin
	RA_INPUT_expected[2] = 1'bX;
end 
// expected RA_INPUT[ 1 ]
initial
begin
	RA_INPUT_expected[1] = 1'bX;
end 
// expected RA_INPUT[ 0 ]
initial
begin
	RA_INPUT_expected[0] = 1'bX;
end 
// expected RB_INPUT[ 7 ]
initial
begin
	RB_INPUT_expected[7] = 1'bX;
end 
// expected RB_INPUT[ 6 ]
initial
begin
	RB_INPUT_expected[6] = 1'bX;
end 
// expected RB_INPUT[ 5 ]
initial
begin
	RB_INPUT_expected[5] = 1'bX;
end 
// expected RB_INPUT[ 4 ]
initial
begin
	RB_INPUT_expected[4] = 1'bX;
end 
// expected RB_INPUT[ 3 ]
initial
begin
	RB_INPUT_expected[3] = 1'bX;
end 
// expected RB_INPUT[ 2 ]
initial
begin
	RB_INPUT_expected[2] = 1'bX;
end 
// expected RB_INPUT[ 1 ]
initial
begin
	RB_INPUT_expected[1] = 1'bX;
end 
// expected RB_INPUT[ 0 ]
initial
begin
	RB_INPUT_expected[0] = 1'bX;
end 
// expected RAM_WRDATA[ 7 ]
initial
begin
	RAM_WRDATA_expected[7] = 1'bX;
end 
// expected RAM_WRDATA[ 6 ]
initial
begin
	RAM_WRDATA_expected[6] = 1'bX;
end 
// expected RAM_WRDATA[ 5 ]
initial
begin
	RAM_WRDATA_expected[5] = 1'bX;
end 
// expected RAM_WRDATA[ 4 ]
initial
begin
	RAM_WRDATA_expected[4] = 1'bX;
end 
// expected RAM_WRDATA[ 3 ]
initial
begin
	RAM_WRDATA_expected[3] = 1'bX;
end 
// expected RAM_WRDATA[ 2 ]
initial
begin
	RAM_WRDATA_expected[2] = 1'bX;
end 
// expected RAM_WRDATA[ 1 ]
initial
begin
	RAM_WRDATA_expected[1] = 1'bX;
end 
// expected RAM_WRDATA[ 0 ]
initial
begin
	RAM_WRDATA_expected[0] = 1'bX;
end 
// generate trigger
always @(INS_expected or INS or MAR_DATA_expected or MAR_DATA or PC_DATA_expected or PC_DATA or R0_DATA_expected or R0_DATA or R1_DATA_expected or R1_DATA or RA_INPUT_expected or RA_INPUT or RAM_ADDR_expected or RAM_ADDR or RAM_RDDATA_expected or RAM_RDDATA or RAM_WRDATA_expected or RAM_WRDATA or RB_INPUT_expected or RB_INPUT or T1_expected or T1 or T2_expected or T2 or T3_expected or T3 or T4_expected or T4)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected INS = %b | expected MAR_DATA = %b | expected PC_DATA = %b | expected R0_DATA = %b | expected R1_DATA = %b | expected RA_INPUT = %b | expected RAM_ADDR = %b | expected RAM_RDDATA = %b | expected RAM_WRDATA = %b | expected RB_INPUT = %b | expected T1 = %b | expected T2 = %b | expected T3 = %b | expected T4 = %b | ",INS_expected_prev,MAR_DATA_expected_prev,PC_DATA_expected_prev,R0_DATA_expected_prev,R1_DATA_expected_prev,RA_INPUT_expected_prev,RAM_ADDR_expected_prev,RAM_RDDATA_expected_prev,RAM_WRDATA_expected_prev,RB_INPUT_expected_prev,T1_expected_prev,T2_expected_prev,T3_expected_prev,T4_expected_prev);
	$display("| real INS = %b | real MAR_DATA = %b | real PC_DATA = %b | real R0_DATA = %b | real R1_DATA = %b | real RA_INPUT = %b | real RAM_ADDR = %b | real RAM_RDDATA = %b | real RAM_WRDATA = %b | real RB_INPUT = %b | real T1 = %b | real T2 = %b | real T3 = %b | real T4 = %b | ",INS_prev,MAR_DATA_prev,PC_DATA_prev,R0_DATA_prev,R1_DATA_prev,RA_INPUT_prev,RAM_ADDR_prev,RAM_RDDATA_prev,RAM_WRDATA_prev,RB_INPUT_prev,T1_prev,T2_prev,T3_prev,T4_prev);
`endif
	if (
		( INS_expected_prev[0] !== 1'bx ) && ( INS_prev[0] !== INS_expected_prev[0] )
		&& ((INS_expected_prev[0] !== last_INS_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INS[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INS_expected_prev);
		$display ("     Real value = %b", INS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_INS_exp[0] = INS_expected_prev[0];
	end
	if (
		( INS_expected_prev[1] !== 1'bx ) && ( INS_prev[1] !== INS_expected_prev[1] )
		&& ((INS_expected_prev[1] !== last_INS_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INS[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INS_expected_prev);
		$display ("     Real value = %b", INS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_INS_exp[1] = INS_expected_prev[1];
	end
	if (
		( INS_expected_prev[2] !== 1'bx ) && ( INS_prev[2] !== INS_expected_prev[2] )
		&& ((INS_expected_prev[2] !== last_INS_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INS[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INS_expected_prev);
		$display ("     Real value = %b", INS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_INS_exp[2] = INS_expected_prev[2];
	end
	if (
		( INS_expected_prev[3] !== 1'bx ) && ( INS_prev[3] !== INS_expected_prev[3] )
		&& ((INS_expected_prev[3] !== last_INS_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INS[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INS_expected_prev);
		$display ("     Real value = %b", INS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_INS_exp[3] = INS_expected_prev[3];
	end
	if (
		( INS_expected_prev[4] !== 1'bx ) && ( INS_prev[4] !== INS_expected_prev[4] )
		&& ((INS_expected_prev[4] !== last_INS_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INS[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INS_expected_prev);
		$display ("     Real value = %b", INS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_INS_exp[4] = INS_expected_prev[4];
	end
	if (
		( INS_expected_prev[5] !== 1'bx ) && ( INS_prev[5] !== INS_expected_prev[5] )
		&& ((INS_expected_prev[5] !== last_INS_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INS[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INS_expected_prev);
		$display ("     Real value = %b", INS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_INS_exp[5] = INS_expected_prev[5];
	end
	if (
		( INS_expected_prev[6] !== 1'bx ) && ( INS_prev[6] !== INS_expected_prev[6] )
		&& ((INS_expected_prev[6] !== last_INS_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INS[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INS_expected_prev);
		$display ("     Real value = %b", INS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_INS_exp[6] = INS_expected_prev[6];
	end
	if (
		( INS_expected_prev[7] !== 1'bx ) && ( INS_prev[7] !== INS_expected_prev[7] )
		&& ((INS_expected_prev[7] !== last_INS_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INS[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INS_expected_prev);
		$display ("     Real value = %b", INS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_INS_exp[7] = INS_expected_prev[7];
	end
	if (
		( INS_expected_prev[8] !== 1'bx ) && ( INS_prev[8] !== INS_expected_prev[8] )
		&& ((INS_expected_prev[8] !== last_INS_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INS[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INS_expected_prev);
		$display ("     Real value = %b", INS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_INS_exp[8] = INS_expected_prev[8];
	end
	if (
		( INS_expected_prev[9] !== 1'bx ) && ( INS_prev[9] !== INS_expected_prev[9] )
		&& ((INS_expected_prev[9] !== last_INS_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INS[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INS_expected_prev);
		$display ("     Real value = %b", INS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_INS_exp[9] = INS_expected_prev[9];
	end
	if (
		( INS_expected_prev[10] !== 1'bx ) && ( INS_prev[10] !== INS_expected_prev[10] )
		&& ((INS_expected_prev[10] !== last_INS_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INS[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INS_expected_prev);
		$display ("     Real value = %b", INS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_INS_exp[10] = INS_expected_prev[10];
	end
	if (
		( INS_expected_prev[11] !== 1'bx ) && ( INS_prev[11] !== INS_expected_prev[11] )
		&& ((INS_expected_prev[11] !== last_INS_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INS[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INS_expected_prev);
		$display ("     Real value = %b", INS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_INS_exp[11] = INS_expected_prev[11];
	end
	if (
		( INS_expected_prev[12] !== 1'bx ) && ( INS_prev[12] !== INS_expected_prev[12] )
		&& ((INS_expected_prev[12] !== last_INS_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INS[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INS_expected_prev);
		$display ("     Real value = %b", INS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_INS_exp[12] = INS_expected_prev[12];
	end
	if (
		( INS_expected_prev[13] !== 1'bx ) && ( INS_prev[13] !== INS_expected_prev[13] )
		&& ((INS_expected_prev[13] !== last_INS_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INS[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INS_expected_prev);
		$display ("     Real value = %b", INS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_INS_exp[13] = INS_expected_prev[13];
	end
	if (
		( INS_expected_prev[14] !== 1'bx ) && ( INS_prev[14] !== INS_expected_prev[14] )
		&& ((INS_expected_prev[14] !== last_INS_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INS[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INS_expected_prev);
		$display ("     Real value = %b", INS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_INS_exp[14] = INS_expected_prev[14];
	end
	if (
		( INS_expected_prev[15] !== 1'bx ) && ( INS_prev[15] !== INS_expected_prev[15] )
		&& ((INS_expected_prev[15] !== last_INS_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INS[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INS_expected_prev);
		$display ("     Real value = %b", INS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_INS_exp[15] = INS_expected_prev[15];
	end
	if (
		( INS_expected_prev[16] !== 1'bx ) && ( INS_prev[16] !== INS_expected_prev[16] )
		&& ((INS_expected_prev[16] !== last_INS_exp[16]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INS[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INS_expected_prev);
		$display ("     Real value = %b", INS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_INS_exp[16] = INS_expected_prev[16];
	end
	if (
		( INS_expected_prev[17] !== 1'bx ) && ( INS_prev[17] !== INS_expected_prev[17] )
		&& ((INS_expected_prev[17] !== last_INS_exp[17]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INS[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INS_expected_prev);
		$display ("     Real value = %b", INS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_INS_exp[17] = INS_expected_prev[17];
	end
	if (
		( INS_expected_prev[18] !== 1'bx ) && ( INS_prev[18] !== INS_expected_prev[18] )
		&& ((INS_expected_prev[18] !== last_INS_exp[18]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INS[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INS_expected_prev);
		$display ("     Real value = %b", INS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_INS_exp[18] = INS_expected_prev[18];
	end
	if (
		( INS_expected_prev[19] !== 1'bx ) && ( INS_prev[19] !== INS_expected_prev[19] )
		&& ((INS_expected_prev[19] !== last_INS_exp[19]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INS[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INS_expected_prev);
		$display ("     Real value = %b", INS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_INS_exp[19] = INS_expected_prev[19];
	end
	if (
		( INS_expected_prev[20] !== 1'bx ) && ( INS_prev[20] !== INS_expected_prev[20] )
		&& ((INS_expected_prev[20] !== last_INS_exp[20]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INS[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INS_expected_prev);
		$display ("     Real value = %b", INS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_INS_exp[20] = INS_expected_prev[20];
	end
	if (
		( INS_expected_prev[21] !== 1'bx ) && ( INS_prev[21] !== INS_expected_prev[21] )
		&& ((INS_expected_prev[21] !== last_INS_exp[21]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INS[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INS_expected_prev);
		$display ("     Real value = %b", INS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_INS_exp[21] = INS_expected_prev[21];
	end
	if (
		( INS_expected_prev[22] !== 1'bx ) && ( INS_prev[22] !== INS_expected_prev[22] )
		&& ((INS_expected_prev[22] !== last_INS_exp[22]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INS[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INS_expected_prev);
		$display ("     Real value = %b", INS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_INS_exp[22] = INS_expected_prev[22];
	end
	if (
		( INS_expected_prev[23] !== 1'bx ) && ( INS_prev[23] !== INS_expected_prev[23] )
		&& ((INS_expected_prev[23] !== last_INS_exp[23]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INS[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INS_expected_prev);
		$display ("     Real value = %b", INS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_INS_exp[23] = INS_expected_prev[23];
	end
	if (
		( INS_expected_prev[24] !== 1'bx ) && ( INS_prev[24] !== INS_expected_prev[24] )
		&& ((INS_expected_prev[24] !== last_INS_exp[24]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INS[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INS_expected_prev);
		$display ("     Real value = %b", INS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_INS_exp[24] = INS_expected_prev[24];
	end
	if (
		( INS_expected_prev[25] !== 1'bx ) && ( INS_prev[25] !== INS_expected_prev[25] )
		&& ((INS_expected_prev[25] !== last_INS_exp[25]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INS[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INS_expected_prev);
		$display ("     Real value = %b", INS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_INS_exp[25] = INS_expected_prev[25];
	end
	if (
		( INS_expected_prev[26] !== 1'bx ) && ( INS_prev[26] !== INS_expected_prev[26] )
		&& ((INS_expected_prev[26] !== last_INS_exp[26]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INS[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INS_expected_prev);
		$display ("     Real value = %b", INS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_INS_exp[26] = INS_expected_prev[26];
	end
	if (
		( INS_expected_prev[27] !== 1'bx ) && ( INS_prev[27] !== INS_expected_prev[27] )
		&& ((INS_expected_prev[27] !== last_INS_exp[27]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INS[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INS_expected_prev);
		$display ("     Real value = %b", INS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_INS_exp[27] = INS_expected_prev[27];
	end
	if (
		( INS_expected_prev[28] !== 1'bx ) && ( INS_prev[28] !== INS_expected_prev[28] )
		&& ((INS_expected_prev[28] !== last_INS_exp[28]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INS[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INS_expected_prev);
		$display ("     Real value = %b", INS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_INS_exp[28] = INS_expected_prev[28];
	end
	if (
		( INS_expected_prev[29] !== 1'bx ) && ( INS_prev[29] !== INS_expected_prev[29] )
		&& ((INS_expected_prev[29] !== last_INS_exp[29]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INS[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INS_expected_prev);
		$display ("     Real value = %b", INS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_INS_exp[29] = INS_expected_prev[29];
	end
	if (
		( INS_expected_prev[30] !== 1'bx ) && ( INS_prev[30] !== INS_expected_prev[30] )
		&& ((INS_expected_prev[30] !== last_INS_exp[30]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INS[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INS_expected_prev);
		$display ("     Real value = %b", INS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_INS_exp[30] = INS_expected_prev[30];
	end
	if (
		( INS_expected_prev[31] !== 1'bx ) && ( INS_prev[31] !== INS_expected_prev[31] )
		&& ((INS_expected_prev[31] !== last_INS_exp[31]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INS[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INS_expected_prev);
		$display ("     Real value = %b", INS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_INS_exp[31] = INS_expected_prev[31];
	end
	if (
		( MAR_DATA_expected_prev[0] !== 1'bx ) && ( MAR_DATA_prev[0] !== MAR_DATA_expected_prev[0] )
		&& ((MAR_DATA_expected_prev[0] !== last_MAR_DATA_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MAR_DATA[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MAR_DATA_expected_prev);
		$display ("     Real value = %b", MAR_DATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_MAR_DATA_exp[0] = MAR_DATA_expected_prev[0];
	end
	if (
		( MAR_DATA_expected_prev[1] !== 1'bx ) && ( MAR_DATA_prev[1] !== MAR_DATA_expected_prev[1] )
		&& ((MAR_DATA_expected_prev[1] !== last_MAR_DATA_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MAR_DATA[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MAR_DATA_expected_prev);
		$display ("     Real value = %b", MAR_DATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_MAR_DATA_exp[1] = MAR_DATA_expected_prev[1];
	end
	if (
		( MAR_DATA_expected_prev[2] !== 1'bx ) && ( MAR_DATA_prev[2] !== MAR_DATA_expected_prev[2] )
		&& ((MAR_DATA_expected_prev[2] !== last_MAR_DATA_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MAR_DATA[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MAR_DATA_expected_prev);
		$display ("     Real value = %b", MAR_DATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_MAR_DATA_exp[2] = MAR_DATA_expected_prev[2];
	end
	if (
		( MAR_DATA_expected_prev[3] !== 1'bx ) && ( MAR_DATA_prev[3] !== MAR_DATA_expected_prev[3] )
		&& ((MAR_DATA_expected_prev[3] !== last_MAR_DATA_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MAR_DATA[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MAR_DATA_expected_prev);
		$display ("     Real value = %b", MAR_DATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_MAR_DATA_exp[3] = MAR_DATA_expected_prev[3];
	end
	if (
		( MAR_DATA_expected_prev[4] !== 1'bx ) && ( MAR_DATA_prev[4] !== MAR_DATA_expected_prev[4] )
		&& ((MAR_DATA_expected_prev[4] !== last_MAR_DATA_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MAR_DATA[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MAR_DATA_expected_prev);
		$display ("     Real value = %b", MAR_DATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_MAR_DATA_exp[4] = MAR_DATA_expected_prev[4];
	end
	if (
		( MAR_DATA_expected_prev[5] !== 1'bx ) && ( MAR_DATA_prev[5] !== MAR_DATA_expected_prev[5] )
		&& ((MAR_DATA_expected_prev[5] !== last_MAR_DATA_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MAR_DATA[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MAR_DATA_expected_prev);
		$display ("     Real value = %b", MAR_DATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_MAR_DATA_exp[5] = MAR_DATA_expected_prev[5];
	end
	if (
		( MAR_DATA_expected_prev[6] !== 1'bx ) && ( MAR_DATA_prev[6] !== MAR_DATA_expected_prev[6] )
		&& ((MAR_DATA_expected_prev[6] !== last_MAR_DATA_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MAR_DATA[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MAR_DATA_expected_prev);
		$display ("     Real value = %b", MAR_DATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_MAR_DATA_exp[6] = MAR_DATA_expected_prev[6];
	end
	if (
		( MAR_DATA_expected_prev[7] !== 1'bx ) && ( MAR_DATA_prev[7] !== MAR_DATA_expected_prev[7] )
		&& ((MAR_DATA_expected_prev[7] !== last_MAR_DATA_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MAR_DATA[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MAR_DATA_expected_prev);
		$display ("     Real value = %b", MAR_DATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_MAR_DATA_exp[7] = MAR_DATA_expected_prev[7];
	end
	if (
		( PC_DATA_expected_prev[0] !== 1'bx ) && ( PC_DATA_prev[0] !== PC_DATA_expected_prev[0] )
		&& ((PC_DATA_expected_prev[0] !== last_PC_DATA_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_DATA[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_DATA_expected_prev);
		$display ("     Real value = %b", PC_DATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_PC_DATA_exp[0] = PC_DATA_expected_prev[0];
	end
	if (
		( PC_DATA_expected_prev[1] !== 1'bx ) && ( PC_DATA_prev[1] !== PC_DATA_expected_prev[1] )
		&& ((PC_DATA_expected_prev[1] !== last_PC_DATA_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_DATA[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_DATA_expected_prev);
		$display ("     Real value = %b", PC_DATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_PC_DATA_exp[1] = PC_DATA_expected_prev[1];
	end
	if (
		( PC_DATA_expected_prev[2] !== 1'bx ) && ( PC_DATA_prev[2] !== PC_DATA_expected_prev[2] )
		&& ((PC_DATA_expected_prev[2] !== last_PC_DATA_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_DATA[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_DATA_expected_prev);
		$display ("     Real value = %b", PC_DATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_PC_DATA_exp[2] = PC_DATA_expected_prev[2];
	end
	if (
		( PC_DATA_expected_prev[3] !== 1'bx ) && ( PC_DATA_prev[3] !== PC_DATA_expected_prev[3] )
		&& ((PC_DATA_expected_prev[3] !== last_PC_DATA_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_DATA[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_DATA_expected_prev);
		$display ("     Real value = %b", PC_DATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_PC_DATA_exp[3] = PC_DATA_expected_prev[3];
	end
	if (
		( PC_DATA_expected_prev[4] !== 1'bx ) && ( PC_DATA_prev[4] !== PC_DATA_expected_prev[4] )
		&& ((PC_DATA_expected_prev[4] !== last_PC_DATA_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_DATA[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_DATA_expected_prev);
		$display ("     Real value = %b", PC_DATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_PC_DATA_exp[4] = PC_DATA_expected_prev[4];
	end
	if (
		( PC_DATA_expected_prev[5] !== 1'bx ) && ( PC_DATA_prev[5] !== PC_DATA_expected_prev[5] )
		&& ((PC_DATA_expected_prev[5] !== last_PC_DATA_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_DATA[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_DATA_expected_prev);
		$display ("     Real value = %b", PC_DATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_PC_DATA_exp[5] = PC_DATA_expected_prev[5];
	end
	if (
		( PC_DATA_expected_prev[6] !== 1'bx ) && ( PC_DATA_prev[6] !== PC_DATA_expected_prev[6] )
		&& ((PC_DATA_expected_prev[6] !== last_PC_DATA_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_DATA[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_DATA_expected_prev);
		$display ("     Real value = %b", PC_DATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_PC_DATA_exp[6] = PC_DATA_expected_prev[6];
	end
	if (
		( PC_DATA_expected_prev[7] !== 1'bx ) && ( PC_DATA_prev[7] !== PC_DATA_expected_prev[7] )
		&& ((PC_DATA_expected_prev[7] !== last_PC_DATA_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_DATA[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_DATA_expected_prev);
		$display ("     Real value = %b", PC_DATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_PC_DATA_exp[7] = PC_DATA_expected_prev[7];
	end
	if (
		( R0_DATA_expected_prev[0] !== 1'bx ) && ( R0_DATA_prev[0] !== R0_DATA_expected_prev[0] )
		&& ((R0_DATA_expected_prev[0] !== last_R0_DATA_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R0_DATA[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R0_DATA_expected_prev);
		$display ("     Real value = %b", R0_DATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_R0_DATA_exp[0] = R0_DATA_expected_prev[0];
	end
	if (
		( R0_DATA_expected_prev[1] !== 1'bx ) && ( R0_DATA_prev[1] !== R0_DATA_expected_prev[1] )
		&& ((R0_DATA_expected_prev[1] !== last_R0_DATA_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R0_DATA[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R0_DATA_expected_prev);
		$display ("     Real value = %b", R0_DATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_R0_DATA_exp[1] = R0_DATA_expected_prev[1];
	end
	if (
		( R0_DATA_expected_prev[2] !== 1'bx ) && ( R0_DATA_prev[2] !== R0_DATA_expected_prev[2] )
		&& ((R0_DATA_expected_prev[2] !== last_R0_DATA_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R0_DATA[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R0_DATA_expected_prev);
		$display ("     Real value = %b", R0_DATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_R0_DATA_exp[2] = R0_DATA_expected_prev[2];
	end
	if (
		( R0_DATA_expected_prev[3] !== 1'bx ) && ( R0_DATA_prev[3] !== R0_DATA_expected_prev[3] )
		&& ((R0_DATA_expected_prev[3] !== last_R0_DATA_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R0_DATA[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R0_DATA_expected_prev);
		$display ("     Real value = %b", R0_DATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_R0_DATA_exp[3] = R0_DATA_expected_prev[3];
	end
	if (
		( R0_DATA_expected_prev[4] !== 1'bx ) && ( R0_DATA_prev[4] !== R0_DATA_expected_prev[4] )
		&& ((R0_DATA_expected_prev[4] !== last_R0_DATA_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R0_DATA[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R0_DATA_expected_prev);
		$display ("     Real value = %b", R0_DATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_R0_DATA_exp[4] = R0_DATA_expected_prev[4];
	end
	if (
		( R0_DATA_expected_prev[5] !== 1'bx ) && ( R0_DATA_prev[5] !== R0_DATA_expected_prev[5] )
		&& ((R0_DATA_expected_prev[5] !== last_R0_DATA_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R0_DATA[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R0_DATA_expected_prev);
		$display ("     Real value = %b", R0_DATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_R0_DATA_exp[5] = R0_DATA_expected_prev[5];
	end
	if (
		( R0_DATA_expected_prev[6] !== 1'bx ) && ( R0_DATA_prev[6] !== R0_DATA_expected_prev[6] )
		&& ((R0_DATA_expected_prev[6] !== last_R0_DATA_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R0_DATA[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R0_DATA_expected_prev);
		$display ("     Real value = %b", R0_DATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_R0_DATA_exp[6] = R0_DATA_expected_prev[6];
	end
	if (
		( R0_DATA_expected_prev[7] !== 1'bx ) && ( R0_DATA_prev[7] !== R0_DATA_expected_prev[7] )
		&& ((R0_DATA_expected_prev[7] !== last_R0_DATA_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R0_DATA[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R0_DATA_expected_prev);
		$display ("     Real value = %b", R0_DATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_R0_DATA_exp[7] = R0_DATA_expected_prev[7];
	end
	if (
		( R1_DATA_expected_prev[0] !== 1'bx ) && ( R1_DATA_prev[0] !== R1_DATA_expected_prev[0] )
		&& ((R1_DATA_expected_prev[0] !== last_R1_DATA_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1_DATA[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_DATA_expected_prev);
		$display ("     Real value = %b", R1_DATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_R1_DATA_exp[0] = R1_DATA_expected_prev[0];
	end
	if (
		( R1_DATA_expected_prev[1] !== 1'bx ) && ( R1_DATA_prev[1] !== R1_DATA_expected_prev[1] )
		&& ((R1_DATA_expected_prev[1] !== last_R1_DATA_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1_DATA[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_DATA_expected_prev);
		$display ("     Real value = %b", R1_DATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_R1_DATA_exp[1] = R1_DATA_expected_prev[1];
	end
	if (
		( R1_DATA_expected_prev[2] !== 1'bx ) && ( R1_DATA_prev[2] !== R1_DATA_expected_prev[2] )
		&& ((R1_DATA_expected_prev[2] !== last_R1_DATA_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1_DATA[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_DATA_expected_prev);
		$display ("     Real value = %b", R1_DATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_R1_DATA_exp[2] = R1_DATA_expected_prev[2];
	end
	if (
		( R1_DATA_expected_prev[3] !== 1'bx ) && ( R1_DATA_prev[3] !== R1_DATA_expected_prev[3] )
		&& ((R1_DATA_expected_prev[3] !== last_R1_DATA_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1_DATA[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_DATA_expected_prev);
		$display ("     Real value = %b", R1_DATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_R1_DATA_exp[3] = R1_DATA_expected_prev[3];
	end
	if (
		( R1_DATA_expected_prev[4] !== 1'bx ) && ( R1_DATA_prev[4] !== R1_DATA_expected_prev[4] )
		&& ((R1_DATA_expected_prev[4] !== last_R1_DATA_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1_DATA[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_DATA_expected_prev);
		$display ("     Real value = %b", R1_DATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_R1_DATA_exp[4] = R1_DATA_expected_prev[4];
	end
	if (
		( R1_DATA_expected_prev[5] !== 1'bx ) && ( R1_DATA_prev[5] !== R1_DATA_expected_prev[5] )
		&& ((R1_DATA_expected_prev[5] !== last_R1_DATA_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1_DATA[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_DATA_expected_prev);
		$display ("     Real value = %b", R1_DATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_R1_DATA_exp[5] = R1_DATA_expected_prev[5];
	end
	if (
		( R1_DATA_expected_prev[6] !== 1'bx ) && ( R1_DATA_prev[6] !== R1_DATA_expected_prev[6] )
		&& ((R1_DATA_expected_prev[6] !== last_R1_DATA_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1_DATA[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_DATA_expected_prev);
		$display ("     Real value = %b", R1_DATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_R1_DATA_exp[6] = R1_DATA_expected_prev[6];
	end
	if (
		( R1_DATA_expected_prev[7] !== 1'bx ) && ( R1_DATA_prev[7] !== R1_DATA_expected_prev[7] )
		&& ((R1_DATA_expected_prev[7] !== last_R1_DATA_exp[7]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1_DATA[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_DATA_expected_prev);
		$display ("     Real value = %b", R1_DATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_R1_DATA_exp[7] = R1_DATA_expected_prev[7];
	end
	if (
		( RA_INPUT_expected_prev[0] !== 1'bx ) && ( RA_INPUT_prev[0] !== RA_INPUT_expected_prev[0] )
		&& ((RA_INPUT_expected_prev[0] !== last_RA_INPUT_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RA_INPUT[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RA_INPUT_expected_prev);
		$display ("     Real value = %b", RA_INPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_RA_INPUT_exp[0] = RA_INPUT_expected_prev[0];
	end
	if (
		( RA_INPUT_expected_prev[1] !== 1'bx ) && ( RA_INPUT_prev[1] !== RA_INPUT_expected_prev[1] )
		&& ((RA_INPUT_expected_prev[1] !== last_RA_INPUT_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RA_INPUT[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RA_INPUT_expected_prev);
		$display ("     Real value = %b", RA_INPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_RA_INPUT_exp[1] = RA_INPUT_expected_prev[1];
	end
	if (
		( RA_INPUT_expected_prev[2] !== 1'bx ) && ( RA_INPUT_prev[2] !== RA_INPUT_expected_prev[2] )
		&& ((RA_INPUT_expected_prev[2] !== last_RA_INPUT_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RA_INPUT[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RA_INPUT_expected_prev);
		$display ("     Real value = %b", RA_INPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_RA_INPUT_exp[2] = RA_INPUT_expected_prev[2];
	end
	if (
		( RA_INPUT_expected_prev[3] !== 1'bx ) && ( RA_INPUT_prev[3] !== RA_INPUT_expected_prev[3] )
		&& ((RA_INPUT_expected_prev[3] !== last_RA_INPUT_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RA_INPUT[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RA_INPUT_expected_prev);
		$display ("     Real value = %b", RA_INPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_RA_INPUT_exp[3] = RA_INPUT_expected_prev[3];
	end
	if (
		( RA_INPUT_expected_prev[4] !== 1'bx ) && ( RA_INPUT_prev[4] !== RA_INPUT_expected_prev[4] )
		&& ((RA_INPUT_expected_prev[4] !== last_RA_INPUT_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RA_INPUT[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RA_INPUT_expected_prev);
		$display ("     Real value = %b", RA_INPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_RA_INPUT_exp[4] = RA_INPUT_expected_prev[4];
	end
	if (
		( RA_INPUT_expected_prev[5] !== 1'bx ) && ( RA_INPUT_prev[5] !== RA_INPUT_expected_prev[5] )
		&& ((RA_INPUT_expected_prev[5] !== last_RA_INPUT_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RA_INPUT[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RA_INPUT_expected_prev);
		$display ("     Real value = %b", RA_INPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_RA_INPUT_exp[5] = RA_INPUT_expected_prev[5];
	end
	if (
		( RA_INPUT_expected_prev[6] !== 1'bx ) && ( RA_INPUT_prev[6] !== RA_INPUT_expected_prev[6] )
		&& ((RA_INPUT_expected_prev[6] !== last_RA_INPUT_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RA_INPUT[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RA_INPUT_expected_prev);
		$display ("     Real value = %b", RA_INPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_RA_INPUT_exp[6] = RA_INPUT_expected_prev[6];
	end
	if (
		( RA_INPUT_expected_prev[7] !== 1'bx ) && ( RA_INPUT_prev[7] !== RA_INPUT_expected_prev[7] )
		&& ((RA_INPUT_expected_prev[7] !== last_RA_INPUT_exp[7]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RA_INPUT[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RA_INPUT_expected_prev);
		$display ("     Real value = %b", RA_INPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_RA_INPUT_exp[7] = RA_INPUT_expected_prev[7];
	end
	if (
		( RAM_ADDR_expected_prev[0] !== 1'bx ) && ( RAM_ADDR_prev[0] !== RAM_ADDR_expected_prev[0] )
		&& ((RAM_ADDR_expected_prev[0] !== last_RAM_ADDR_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RAM_ADDR[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RAM_ADDR_expected_prev);
		$display ("     Real value = %b", RAM_ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_RAM_ADDR_exp[0] = RAM_ADDR_expected_prev[0];
	end
	if (
		( RAM_ADDR_expected_prev[1] !== 1'bx ) && ( RAM_ADDR_prev[1] !== RAM_ADDR_expected_prev[1] )
		&& ((RAM_ADDR_expected_prev[1] !== last_RAM_ADDR_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RAM_ADDR[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RAM_ADDR_expected_prev);
		$display ("     Real value = %b", RAM_ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_RAM_ADDR_exp[1] = RAM_ADDR_expected_prev[1];
	end
	if (
		( RAM_ADDR_expected_prev[2] !== 1'bx ) && ( RAM_ADDR_prev[2] !== RAM_ADDR_expected_prev[2] )
		&& ((RAM_ADDR_expected_prev[2] !== last_RAM_ADDR_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RAM_ADDR[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RAM_ADDR_expected_prev);
		$display ("     Real value = %b", RAM_ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_RAM_ADDR_exp[2] = RAM_ADDR_expected_prev[2];
	end
	if (
		( RAM_ADDR_expected_prev[3] !== 1'bx ) && ( RAM_ADDR_prev[3] !== RAM_ADDR_expected_prev[3] )
		&& ((RAM_ADDR_expected_prev[3] !== last_RAM_ADDR_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RAM_ADDR[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RAM_ADDR_expected_prev);
		$display ("     Real value = %b", RAM_ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_RAM_ADDR_exp[3] = RAM_ADDR_expected_prev[3];
	end
	if (
		( RAM_ADDR_expected_prev[4] !== 1'bx ) && ( RAM_ADDR_prev[4] !== RAM_ADDR_expected_prev[4] )
		&& ((RAM_ADDR_expected_prev[4] !== last_RAM_ADDR_exp[4]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RAM_ADDR[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RAM_ADDR_expected_prev);
		$display ("     Real value = %b", RAM_ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_RAM_ADDR_exp[4] = RAM_ADDR_expected_prev[4];
	end
	if (
		( RAM_ADDR_expected_prev[5] !== 1'bx ) && ( RAM_ADDR_prev[5] !== RAM_ADDR_expected_prev[5] )
		&& ((RAM_ADDR_expected_prev[5] !== last_RAM_ADDR_exp[5]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RAM_ADDR[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RAM_ADDR_expected_prev);
		$display ("     Real value = %b", RAM_ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_RAM_ADDR_exp[5] = RAM_ADDR_expected_prev[5];
	end
	if (
		( RAM_ADDR_expected_prev[6] !== 1'bx ) && ( RAM_ADDR_prev[6] !== RAM_ADDR_expected_prev[6] )
		&& ((RAM_ADDR_expected_prev[6] !== last_RAM_ADDR_exp[6]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RAM_ADDR[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RAM_ADDR_expected_prev);
		$display ("     Real value = %b", RAM_ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_RAM_ADDR_exp[6] = RAM_ADDR_expected_prev[6];
	end
	if (
		( RAM_ADDR_expected_prev[7] !== 1'bx ) && ( RAM_ADDR_prev[7] !== RAM_ADDR_expected_prev[7] )
		&& ((RAM_ADDR_expected_prev[7] !== last_RAM_ADDR_exp[7]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RAM_ADDR[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RAM_ADDR_expected_prev);
		$display ("     Real value = %b", RAM_ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_RAM_ADDR_exp[7] = RAM_ADDR_expected_prev[7];
	end
	if (
		( RAM_RDDATA_expected_prev[0] !== 1'bx ) && ( RAM_RDDATA_prev[0] !== RAM_RDDATA_expected_prev[0] )
		&& ((RAM_RDDATA_expected_prev[0] !== last_RAM_RDDATA_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RAM_RDDATA[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RAM_RDDATA_expected_prev);
		$display ("     Real value = %b", RAM_RDDATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_RAM_RDDATA_exp[0] = RAM_RDDATA_expected_prev[0];
	end
	if (
		( RAM_RDDATA_expected_prev[1] !== 1'bx ) && ( RAM_RDDATA_prev[1] !== RAM_RDDATA_expected_prev[1] )
		&& ((RAM_RDDATA_expected_prev[1] !== last_RAM_RDDATA_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RAM_RDDATA[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RAM_RDDATA_expected_prev);
		$display ("     Real value = %b", RAM_RDDATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_RAM_RDDATA_exp[1] = RAM_RDDATA_expected_prev[1];
	end
	if (
		( RAM_RDDATA_expected_prev[2] !== 1'bx ) && ( RAM_RDDATA_prev[2] !== RAM_RDDATA_expected_prev[2] )
		&& ((RAM_RDDATA_expected_prev[2] !== last_RAM_RDDATA_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RAM_RDDATA[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RAM_RDDATA_expected_prev);
		$display ("     Real value = %b", RAM_RDDATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_RAM_RDDATA_exp[2] = RAM_RDDATA_expected_prev[2];
	end
	if (
		( RAM_RDDATA_expected_prev[3] !== 1'bx ) && ( RAM_RDDATA_prev[3] !== RAM_RDDATA_expected_prev[3] )
		&& ((RAM_RDDATA_expected_prev[3] !== last_RAM_RDDATA_exp[3]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RAM_RDDATA[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RAM_RDDATA_expected_prev);
		$display ("     Real value = %b", RAM_RDDATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_RAM_RDDATA_exp[3] = RAM_RDDATA_expected_prev[3];
	end
	if (
		( RAM_RDDATA_expected_prev[4] !== 1'bx ) && ( RAM_RDDATA_prev[4] !== RAM_RDDATA_expected_prev[4] )
		&& ((RAM_RDDATA_expected_prev[4] !== last_RAM_RDDATA_exp[4]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RAM_RDDATA[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RAM_RDDATA_expected_prev);
		$display ("     Real value = %b", RAM_RDDATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_RAM_RDDATA_exp[4] = RAM_RDDATA_expected_prev[4];
	end
	if (
		( RAM_RDDATA_expected_prev[5] !== 1'bx ) && ( RAM_RDDATA_prev[5] !== RAM_RDDATA_expected_prev[5] )
		&& ((RAM_RDDATA_expected_prev[5] !== last_RAM_RDDATA_exp[5]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RAM_RDDATA[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RAM_RDDATA_expected_prev);
		$display ("     Real value = %b", RAM_RDDATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_RAM_RDDATA_exp[5] = RAM_RDDATA_expected_prev[5];
	end
	if (
		( RAM_RDDATA_expected_prev[6] !== 1'bx ) && ( RAM_RDDATA_prev[6] !== RAM_RDDATA_expected_prev[6] )
		&& ((RAM_RDDATA_expected_prev[6] !== last_RAM_RDDATA_exp[6]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RAM_RDDATA[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RAM_RDDATA_expected_prev);
		$display ("     Real value = %b", RAM_RDDATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_RAM_RDDATA_exp[6] = RAM_RDDATA_expected_prev[6];
	end
	if (
		( RAM_RDDATA_expected_prev[7] !== 1'bx ) && ( RAM_RDDATA_prev[7] !== RAM_RDDATA_expected_prev[7] )
		&& ((RAM_RDDATA_expected_prev[7] !== last_RAM_RDDATA_exp[7]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RAM_RDDATA[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RAM_RDDATA_expected_prev);
		$display ("     Real value = %b", RAM_RDDATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_RAM_RDDATA_exp[7] = RAM_RDDATA_expected_prev[7];
	end
	if (
		( RAM_WRDATA_expected_prev[0] !== 1'bx ) && ( RAM_WRDATA_prev[0] !== RAM_WRDATA_expected_prev[0] )
		&& ((RAM_WRDATA_expected_prev[0] !== last_RAM_WRDATA_exp[0]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RAM_WRDATA[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RAM_WRDATA_expected_prev);
		$display ("     Real value = %b", RAM_WRDATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_RAM_WRDATA_exp[0] = RAM_WRDATA_expected_prev[0];
	end
	if (
		( RAM_WRDATA_expected_prev[1] !== 1'bx ) && ( RAM_WRDATA_prev[1] !== RAM_WRDATA_expected_prev[1] )
		&& ((RAM_WRDATA_expected_prev[1] !== last_RAM_WRDATA_exp[1]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RAM_WRDATA[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RAM_WRDATA_expected_prev);
		$display ("     Real value = %b", RAM_WRDATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_RAM_WRDATA_exp[1] = RAM_WRDATA_expected_prev[1];
	end
	if (
		( RAM_WRDATA_expected_prev[2] !== 1'bx ) && ( RAM_WRDATA_prev[2] !== RAM_WRDATA_expected_prev[2] )
		&& ((RAM_WRDATA_expected_prev[2] !== last_RAM_WRDATA_exp[2]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RAM_WRDATA[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RAM_WRDATA_expected_prev);
		$display ("     Real value = %b", RAM_WRDATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_RAM_WRDATA_exp[2] = RAM_WRDATA_expected_prev[2];
	end
	if (
		( RAM_WRDATA_expected_prev[3] !== 1'bx ) && ( RAM_WRDATA_prev[3] !== RAM_WRDATA_expected_prev[3] )
		&& ((RAM_WRDATA_expected_prev[3] !== last_RAM_WRDATA_exp[3]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RAM_WRDATA[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RAM_WRDATA_expected_prev);
		$display ("     Real value = %b", RAM_WRDATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_RAM_WRDATA_exp[3] = RAM_WRDATA_expected_prev[3];
	end
	if (
		( RAM_WRDATA_expected_prev[4] !== 1'bx ) && ( RAM_WRDATA_prev[4] !== RAM_WRDATA_expected_prev[4] )
		&& ((RAM_WRDATA_expected_prev[4] !== last_RAM_WRDATA_exp[4]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RAM_WRDATA[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RAM_WRDATA_expected_prev);
		$display ("     Real value = %b", RAM_WRDATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_RAM_WRDATA_exp[4] = RAM_WRDATA_expected_prev[4];
	end
	if (
		( RAM_WRDATA_expected_prev[5] !== 1'bx ) && ( RAM_WRDATA_prev[5] !== RAM_WRDATA_expected_prev[5] )
		&& ((RAM_WRDATA_expected_prev[5] !== last_RAM_WRDATA_exp[5]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RAM_WRDATA[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RAM_WRDATA_expected_prev);
		$display ("     Real value = %b", RAM_WRDATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_RAM_WRDATA_exp[5] = RAM_WRDATA_expected_prev[5];
	end
	if (
		( RAM_WRDATA_expected_prev[6] !== 1'bx ) && ( RAM_WRDATA_prev[6] !== RAM_WRDATA_expected_prev[6] )
		&& ((RAM_WRDATA_expected_prev[6] !== last_RAM_WRDATA_exp[6]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RAM_WRDATA[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RAM_WRDATA_expected_prev);
		$display ("     Real value = %b", RAM_WRDATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_RAM_WRDATA_exp[6] = RAM_WRDATA_expected_prev[6];
	end
	if (
		( RAM_WRDATA_expected_prev[7] !== 1'bx ) && ( RAM_WRDATA_prev[7] !== RAM_WRDATA_expected_prev[7] )
		&& ((RAM_WRDATA_expected_prev[7] !== last_RAM_WRDATA_exp[7]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RAM_WRDATA[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RAM_WRDATA_expected_prev);
		$display ("     Real value = %b", RAM_WRDATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_RAM_WRDATA_exp[7] = RAM_WRDATA_expected_prev[7];
	end
	if (
		( RB_INPUT_expected_prev[0] !== 1'bx ) && ( RB_INPUT_prev[0] !== RB_INPUT_expected_prev[0] )
		&& ((RB_INPUT_expected_prev[0] !== last_RB_INPUT_exp[0]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RB_INPUT[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RB_INPUT_expected_prev);
		$display ("     Real value = %b", RB_INPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_RB_INPUT_exp[0] = RB_INPUT_expected_prev[0];
	end
	if (
		( RB_INPUT_expected_prev[1] !== 1'bx ) && ( RB_INPUT_prev[1] !== RB_INPUT_expected_prev[1] )
		&& ((RB_INPUT_expected_prev[1] !== last_RB_INPUT_exp[1]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RB_INPUT[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RB_INPUT_expected_prev);
		$display ("     Real value = %b", RB_INPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_RB_INPUT_exp[1] = RB_INPUT_expected_prev[1];
	end
	if (
		( RB_INPUT_expected_prev[2] !== 1'bx ) && ( RB_INPUT_prev[2] !== RB_INPUT_expected_prev[2] )
		&& ((RB_INPUT_expected_prev[2] !== last_RB_INPUT_exp[2]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RB_INPUT[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RB_INPUT_expected_prev);
		$display ("     Real value = %b", RB_INPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_RB_INPUT_exp[2] = RB_INPUT_expected_prev[2];
	end
	if (
		( RB_INPUT_expected_prev[3] !== 1'bx ) && ( RB_INPUT_prev[3] !== RB_INPUT_expected_prev[3] )
		&& ((RB_INPUT_expected_prev[3] !== last_RB_INPUT_exp[3]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RB_INPUT[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RB_INPUT_expected_prev);
		$display ("     Real value = %b", RB_INPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_RB_INPUT_exp[3] = RB_INPUT_expected_prev[3];
	end
	if (
		( RB_INPUT_expected_prev[4] !== 1'bx ) && ( RB_INPUT_prev[4] !== RB_INPUT_expected_prev[4] )
		&& ((RB_INPUT_expected_prev[4] !== last_RB_INPUT_exp[4]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RB_INPUT[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RB_INPUT_expected_prev);
		$display ("     Real value = %b", RB_INPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_RB_INPUT_exp[4] = RB_INPUT_expected_prev[4];
	end
	if (
		( RB_INPUT_expected_prev[5] !== 1'bx ) && ( RB_INPUT_prev[5] !== RB_INPUT_expected_prev[5] )
		&& ((RB_INPUT_expected_prev[5] !== last_RB_INPUT_exp[5]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RB_INPUT[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RB_INPUT_expected_prev);
		$display ("     Real value = %b", RB_INPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_RB_INPUT_exp[5] = RB_INPUT_expected_prev[5];
	end
	if (
		( RB_INPUT_expected_prev[6] !== 1'bx ) && ( RB_INPUT_prev[6] !== RB_INPUT_expected_prev[6] )
		&& ((RB_INPUT_expected_prev[6] !== last_RB_INPUT_exp[6]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RB_INPUT[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RB_INPUT_expected_prev);
		$display ("     Real value = %b", RB_INPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_RB_INPUT_exp[6] = RB_INPUT_expected_prev[6];
	end
	if (
		( RB_INPUT_expected_prev[7] !== 1'bx ) && ( RB_INPUT_prev[7] !== RB_INPUT_expected_prev[7] )
		&& ((RB_INPUT_expected_prev[7] !== last_RB_INPUT_exp[7]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RB_INPUT[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RB_INPUT_expected_prev);
		$display ("     Real value = %b", RB_INPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_RB_INPUT_exp[7] = RB_INPUT_expected_prev[7];
	end
	if (
		( T1_expected_prev !== 1'bx ) && ( T1_prev !== T1_expected_prev )
		&& ((T1_expected_prev !== last_T1_exp) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port T1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", T1_expected_prev);
		$display ("     Real value = %b", T1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_T1_exp = T1_expected_prev;
	end
	if (
		( T2_expected_prev !== 1'bx ) && ( T2_prev !== T2_expected_prev )
		&& ((T2_expected_prev !== last_T2_exp) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port T2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", T2_expected_prev);
		$display ("     Real value = %b", T2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_T2_exp = T2_expected_prev;
	end
	if (
		( T3_expected_prev !== 1'bx ) && ( T3_prev !== T3_expected_prev )
		&& ((T3_expected_prev !== last_T3_exp) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port T3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", T3_expected_prev);
		$display ("     Real value = %b", T3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_T3_exp = T3_expected_prev;
	end
	if (
		( T4_expected_prev !== 1'bx ) && ( T4_prev !== T4_expected_prev )
		&& ((T4_expected_prev !== last_T4_exp) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port T4 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", T4_expected_prev);
		$display ("     Real value = %b", T4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_T4_exp = T4_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#20000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module exp3_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK;
reg ON;
reg PUL;
// wires                                               
wire [31:0] INS;
wire [7:0] MAR_DATA;
wire [7:0] PC_DATA;
wire [7:0] R0_DATA;
wire [7:0] R1_DATA;
wire [7:0] RA_INPUT;
wire [7:0] RAM_ADDR;
wire [7:0] RAM_RDDATA;
wire [7:0] RAM_WRDATA;
wire [7:0] RB_INPUT;
wire T1;
wire T2;
wire T3;
wire T4;

wire sampler;                             

// assign statements (if any)                          
exp3 i1 (
// port map - connection between master ports and signals/registers   
	.CLK(CLK),
	.INS(INS),
	.MAR_DATA(MAR_DATA),
	.ON(ON),
	.PC_DATA(PC_DATA),
	.PUL(PUL),
	.R0_DATA(R0_DATA),
	.R1_DATA(R1_DATA),
	.RA_INPUT(RA_INPUT),
	.RAM_ADDR(RAM_ADDR),
	.RAM_RDDATA(RAM_RDDATA),
	.RAM_WRDATA(RAM_WRDATA),
	.RB_INPUT(RB_INPUT),
	.T1(T1),
	.T2(T2),
	.T3(T3),
	.T4(T4)
);

// ON
initial
begin
	ON = 1'b1;
end 

// PUL
always
begin
	PUL = 1'b0;
	PUL = #500 1'b1;
	#500;
end 

// CLK
initial
begin
	CLK = 1'b1;
	# 1000;
	repeat(1999)
	begin
		CLK = 1'b0;
		CLK = #5000 1'b1;
		# 5000;
	end
	CLK = 1'b0;
	CLK = #5000 1'b1;
end 

exp3_vlg_sample_tst tb_sample (
	.CLK(CLK),
	.ON(ON),
	.PUL(PUL),
	.sampler_tx(sampler)
);

exp3_vlg_check_tst tb_out(
	.INS(INS),
	.MAR_DATA(MAR_DATA),
	.PC_DATA(PC_DATA),
	.R0_DATA(R0_DATA),
	.R1_DATA(R1_DATA),
	.RA_INPUT(RA_INPUT),
	.RAM_ADDR(RAM_ADDR),
	.RAM_RDDATA(RAM_RDDATA),
	.RAM_WRDATA(RAM_WRDATA),
	.RB_INPUT(RB_INPUT),
	.T1(T1),
	.T2(T2),
	.T3(T3),
	.T4(T4),
	.sampler_rx(sampler)
);
endmodule

