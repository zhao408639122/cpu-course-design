// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "09/25/2020 09:00:33"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    ex1
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ex1_vlg_sample_tst(
	clk,
	clr,
	sampler_tx
);
input  clk;
input  clr;
output sampler_tx;

reg sample;
time current_time;
always @(clk or clr)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module ex1_vlg_check_tst (
	debug1,
	debug2,
	Debug3,
	Debug4,
	F,
	sampler_rx
);
input [7:0] debug1;
input [23:0] debug2;
input [0:7] Debug3;
input [7:0] Debug4;
input [0:7] F;
input sampler_rx;

reg [7:0] debug1_expected;
reg [23:0] debug2_expected;
reg [0:7] Debug3_expected;
reg [7:0] Debug4_expected;
reg [0:7] F_expected;

reg [7:0] debug1_prev;
reg [23:0] debug2_prev;
reg [0:7] Debug3_prev;
reg [7:0] Debug4_prev;
reg [0:7] F_prev;

reg [7:0] debug1_expected_prev;
reg [23:0] debug2_expected_prev;
reg [0:7] Debug3_expected_prev;
reg [7:0] Debug4_expected_prev;
reg [0:7] F_expected_prev;

reg [7:0] last_debug1_exp;
reg [23:0] last_debug2_exp;
reg [0:7] last_Debug3_exp;
reg [7:0] last_Debug4_exp;
reg [0:7] last_F_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:5] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 5'b1;
end

// update real /o prevs

always @(trigger)
begin
	debug1_prev = debug1;
	debug2_prev = debug2;
	Debug3_prev = Debug3;
	Debug4_prev = Debug4;
	F_prev = F;
end

// update expected /o prevs

always @(trigger)
begin
	debug1_expected_prev = debug1_expected;
	debug2_expected_prev = debug2_expected;
	Debug3_expected_prev = Debug3_expected;
	Debug4_expected_prev = Debug4_expected;
	F_expected_prev = F_expected;
end


// expected F[ 7 ]
initial
begin
	F_expected[7] = 1'b0;
	F_expected[7] = #60000 1'bX;
end 
// expected F[ 6 ]
initial
begin
	F_expected[6] = 1'b0;
	F_expected[6] = #60000 1'bX;
end 
// expected F[ 5 ]
initial
begin
	F_expected[5] = 1'b0;
	F_expected[5] = #60000 1'bX;
end 
// expected F[ 4 ]
initial
begin
	F_expected[4] = 1'b0;
	F_expected[4] = #60000 1'bX;
end 
// expected F[ 3 ]
initial
begin
	F_expected[3] = 1'b0;
	F_expected[3] = #60000 1'bX;
end 
// expected F[ 2 ]
initial
begin
	F_expected[2] = 1'b0;
	F_expected[2] = #60000 1'bX;
end 
// expected F[ 1 ]
initial
begin
	F_expected[1] = 1'b0;
	F_expected[1] = #60000 1'bX;
end 
// expected F[ 0 ]
initial
begin
	F_expected[0] = 1'b0;
	F_expected[0] = #60000 1'bX;
end 
// expected debug1[ 7 ]
initial
begin
	debug1_expected[7] = 1'bX;
end 
// expected debug1[ 6 ]
initial
begin
	debug1_expected[6] = 1'bX;
end 
// expected debug1[ 5 ]
initial
begin
	debug1_expected[5] = 1'bX;
end 
// expected debug1[ 4 ]
initial
begin
	debug1_expected[4] = 1'bX;
end 
// expected debug1[ 3 ]
initial
begin
	debug1_expected[3] = 1'bX;
end 
// expected debug1[ 2 ]
initial
begin
	debug1_expected[2] = 1'bX;
end 
// expected debug1[ 1 ]
initial
begin
	debug1_expected[1] = 1'bX;
end 
// expected debug1[ 0 ]
initial
begin
	debug1_expected[0] = 1'bX;
end 
// expected debug2[ 23 ]
initial
begin
	debug2_expected[23] = 1'bX;
end 
// expected debug2[ 22 ]
initial
begin
	debug2_expected[22] = 1'bX;
end 
// expected debug2[ 21 ]
initial
begin
	debug2_expected[21] = 1'bX;
end 
// expected debug2[ 20 ]
initial
begin
	debug2_expected[20] = 1'bX;
end 
// expected debug2[ 19 ]
initial
begin
	debug2_expected[19] = 1'bX;
end 
// expected debug2[ 18 ]
initial
begin
	debug2_expected[18] = 1'bX;
end 
// expected debug2[ 17 ]
initial
begin
	debug2_expected[17] = 1'bX;
end 
// expected debug2[ 16 ]
initial
begin
	debug2_expected[16] = 1'bX;
end 
// expected debug2[ 15 ]
initial
begin
	debug2_expected[15] = 1'bX;
end 
// expected debug2[ 14 ]
initial
begin
	debug2_expected[14] = 1'bX;
end 
// expected debug2[ 13 ]
initial
begin
	debug2_expected[13] = 1'bX;
end 
// expected debug2[ 12 ]
initial
begin
	debug2_expected[12] = 1'bX;
end 
// expected debug2[ 11 ]
initial
begin
	debug2_expected[11] = 1'bX;
end 
// expected debug2[ 10 ]
initial
begin
	debug2_expected[10] = 1'bX;
end 
// expected debug2[ 9 ]
initial
begin
	debug2_expected[9] = 1'bX;
end 
// expected debug2[ 8 ]
initial
begin
	debug2_expected[8] = 1'bX;
end 
// expected debug2[ 7 ]
initial
begin
	debug2_expected[7] = 1'bX;
end 
// expected debug2[ 6 ]
initial
begin
	debug2_expected[6] = 1'bX;
end 
// expected debug2[ 5 ]
initial
begin
	debug2_expected[5] = 1'bX;
end 
// expected debug2[ 4 ]
initial
begin
	debug2_expected[4] = 1'bX;
end 
// expected debug2[ 3 ]
initial
begin
	debug2_expected[3] = 1'bX;
end 
// expected debug2[ 2 ]
initial
begin
	debug2_expected[2] = 1'bX;
end 
// expected debug2[ 1 ]
initial
begin
	debug2_expected[1] = 1'bX;
end 
// expected debug2[ 0 ]
initial
begin
	debug2_expected[0] = 1'bX;
end 
// expected Debug3[ 7 ]
initial
begin
	Debug3_expected[7] = 1'bX;
end 
// expected Debug3[ 6 ]
initial
begin
	Debug3_expected[6] = 1'bX;
end 
// expected Debug3[ 5 ]
initial
begin
	Debug3_expected[5] = 1'bX;
end 
// expected Debug3[ 4 ]
initial
begin
	Debug3_expected[4] = 1'bX;
end 
// expected Debug3[ 3 ]
initial
begin
	Debug3_expected[3] = 1'bX;
end 
// expected Debug3[ 2 ]
initial
begin
	Debug3_expected[2] = 1'bX;
end 
// expected Debug3[ 1 ]
initial
begin
	Debug3_expected[1] = 1'bX;
end 
// expected Debug3[ 0 ]
initial
begin
	Debug3_expected[0] = 1'bX;
end 
// expected Debug4[ 7 ]
initial
begin
	Debug4_expected[7] = 1'bX;
end 
// expected Debug4[ 6 ]
initial
begin
	Debug4_expected[6] = 1'bX;
end 
// expected Debug4[ 5 ]
initial
begin
	Debug4_expected[5] = 1'bX;
end 
// expected Debug4[ 4 ]
initial
begin
	Debug4_expected[4] = 1'bX;
end 
// expected Debug4[ 3 ]
initial
begin
	Debug4_expected[3] = 1'bX;
end 
// expected Debug4[ 2 ]
initial
begin
	Debug4_expected[2] = 1'bX;
end 
// expected Debug4[ 1 ]
initial
begin
	Debug4_expected[1] = 1'bX;
end 
// expected Debug4[ 0 ]
initial
begin
	Debug4_expected[0] = 1'bX;
end 
// generate trigger
always @(debug1_expected or debug1 or debug2_expected or debug2 or Debug3_expected or Debug3 or Debug4_expected or Debug4 or F_expected or F)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected debug1 = %b | expected debug2 = %b | expected Debug3 = %b | expected Debug4 = %b | expected F = %b | ",debug1_expected_prev,debug2_expected_prev,Debug3_expected_prev,Debug4_expected_prev,F_expected_prev);
	$display("| real debug1 = %b | real debug2 = %b | real Debug3 = %b | real Debug4 = %b | real F = %b | ",debug1_prev,debug2_prev,Debug3_prev,Debug4_prev,F_prev);
`endif
	if (
		( debug1_expected_prev[0] !== 1'bx ) && ( debug1_prev[0] !== debug1_expected_prev[0] )
		&& ((debug1_expected_prev[0] !== last_debug1_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug1_expected_prev);
		$display ("     Real value = %b", debug1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_debug1_exp[0] = debug1_expected_prev[0];
	end
	if (
		( debug1_expected_prev[1] !== 1'bx ) && ( debug1_prev[1] !== debug1_expected_prev[1] )
		&& ((debug1_expected_prev[1] !== last_debug1_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug1_expected_prev);
		$display ("     Real value = %b", debug1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_debug1_exp[1] = debug1_expected_prev[1];
	end
	if (
		( debug1_expected_prev[2] !== 1'bx ) && ( debug1_prev[2] !== debug1_expected_prev[2] )
		&& ((debug1_expected_prev[2] !== last_debug1_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug1_expected_prev);
		$display ("     Real value = %b", debug1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_debug1_exp[2] = debug1_expected_prev[2];
	end
	if (
		( debug1_expected_prev[3] !== 1'bx ) && ( debug1_prev[3] !== debug1_expected_prev[3] )
		&& ((debug1_expected_prev[3] !== last_debug1_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug1_expected_prev);
		$display ("     Real value = %b", debug1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_debug1_exp[3] = debug1_expected_prev[3];
	end
	if (
		( debug1_expected_prev[4] !== 1'bx ) && ( debug1_prev[4] !== debug1_expected_prev[4] )
		&& ((debug1_expected_prev[4] !== last_debug1_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug1_expected_prev);
		$display ("     Real value = %b", debug1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_debug1_exp[4] = debug1_expected_prev[4];
	end
	if (
		( debug1_expected_prev[5] !== 1'bx ) && ( debug1_prev[5] !== debug1_expected_prev[5] )
		&& ((debug1_expected_prev[5] !== last_debug1_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug1_expected_prev);
		$display ("     Real value = %b", debug1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_debug1_exp[5] = debug1_expected_prev[5];
	end
	if (
		( debug1_expected_prev[6] !== 1'bx ) && ( debug1_prev[6] !== debug1_expected_prev[6] )
		&& ((debug1_expected_prev[6] !== last_debug1_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug1_expected_prev);
		$display ("     Real value = %b", debug1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_debug1_exp[6] = debug1_expected_prev[6];
	end
	if (
		( debug1_expected_prev[7] !== 1'bx ) && ( debug1_prev[7] !== debug1_expected_prev[7] )
		&& ((debug1_expected_prev[7] !== last_debug1_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug1[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug1_expected_prev);
		$display ("     Real value = %b", debug1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_debug1_exp[7] = debug1_expected_prev[7];
	end
	if (
		( debug2_expected_prev[0] !== 1'bx ) && ( debug2_prev[0] !== debug2_expected_prev[0] )
		&& ((debug2_expected_prev[0] !== last_debug2_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug2_expected_prev);
		$display ("     Real value = %b", debug2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_debug2_exp[0] = debug2_expected_prev[0];
	end
	if (
		( debug2_expected_prev[1] !== 1'bx ) && ( debug2_prev[1] !== debug2_expected_prev[1] )
		&& ((debug2_expected_prev[1] !== last_debug2_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug2_expected_prev);
		$display ("     Real value = %b", debug2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_debug2_exp[1] = debug2_expected_prev[1];
	end
	if (
		( debug2_expected_prev[2] !== 1'bx ) && ( debug2_prev[2] !== debug2_expected_prev[2] )
		&& ((debug2_expected_prev[2] !== last_debug2_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug2_expected_prev);
		$display ("     Real value = %b", debug2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_debug2_exp[2] = debug2_expected_prev[2];
	end
	if (
		( debug2_expected_prev[3] !== 1'bx ) && ( debug2_prev[3] !== debug2_expected_prev[3] )
		&& ((debug2_expected_prev[3] !== last_debug2_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug2_expected_prev);
		$display ("     Real value = %b", debug2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_debug2_exp[3] = debug2_expected_prev[3];
	end
	if (
		( debug2_expected_prev[4] !== 1'bx ) && ( debug2_prev[4] !== debug2_expected_prev[4] )
		&& ((debug2_expected_prev[4] !== last_debug2_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug2_expected_prev);
		$display ("     Real value = %b", debug2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_debug2_exp[4] = debug2_expected_prev[4];
	end
	if (
		( debug2_expected_prev[5] !== 1'bx ) && ( debug2_prev[5] !== debug2_expected_prev[5] )
		&& ((debug2_expected_prev[5] !== last_debug2_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug2_expected_prev);
		$display ("     Real value = %b", debug2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_debug2_exp[5] = debug2_expected_prev[5];
	end
	if (
		( debug2_expected_prev[6] !== 1'bx ) && ( debug2_prev[6] !== debug2_expected_prev[6] )
		&& ((debug2_expected_prev[6] !== last_debug2_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug2_expected_prev);
		$display ("     Real value = %b", debug2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_debug2_exp[6] = debug2_expected_prev[6];
	end
	if (
		( debug2_expected_prev[7] !== 1'bx ) && ( debug2_prev[7] !== debug2_expected_prev[7] )
		&& ((debug2_expected_prev[7] !== last_debug2_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug2[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug2_expected_prev);
		$display ("     Real value = %b", debug2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_debug2_exp[7] = debug2_expected_prev[7];
	end
	if (
		( debug2_expected_prev[8] !== 1'bx ) && ( debug2_prev[8] !== debug2_expected_prev[8] )
		&& ((debug2_expected_prev[8] !== last_debug2_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug2[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug2_expected_prev);
		$display ("     Real value = %b", debug2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_debug2_exp[8] = debug2_expected_prev[8];
	end
	if (
		( debug2_expected_prev[9] !== 1'bx ) && ( debug2_prev[9] !== debug2_expected_prev[9] )
		&& ((debug2_expected_prev[9] !== last_debug2_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug2[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug2_expected_prev);
		$display ("     Real value = %b", debug2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_debug2_exp[9] = debug2_expected_prev[9];
	end
	if (
		( debug2_expected_prev[10] !== 1'bx ) && ( debug2_prev[10] !== debug2_expected_prev[10] )
		&& ((debug2_expected_prev[10] !== last_debug2_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug2[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug2_expected_prev);
		$display ("     Real value = %b", debug2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_debug2_exp[10] = debug2_expected_prev[10];
	end
	if (
		( debug2_expected_prev[11] !== 1'bx ) && ( debug2_prev[11] !== debug2_expected_prev[11] )
		&& ((debug2_expected_prev[11] !== last_debug2_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug2[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug2_expected_prev);
		$display ("     Real value = %b", debug2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_debug2_exp[11] = debug2_expected_prev[11];
	end
	if (
		( debug2_expected_prev[12] !== 1'bx ) && ( debug2_prev[12] !== debug2_expected_prev[12] )
		&& ((debug2_expected_prev[12] !== last_debug2_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug2[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug2_expected_prev);
		$display ("     Real value = %b", debug2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_debug2_exp[12] = debug2_expected_prev[12];
	end
	if (
		( debug2_expected_prev[13] !== 1'bx ) && ( debug2_prev[13] !== debug2_expected_prev[13] )
		&& ((debug2_expected_prev[13] !== last_debug2_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug2[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug2_expected_prev);
		$display ("     Real value = %b", debug2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_debug2_exp[13] = debug2_expected_prev[13];
	end
	if (
		( debug2_expected_prev[14] !== 1'bx ) && ( debug2_prev[14] !== debug2_expected_prev[14] )
		&& ((debug2_expected_prev[14] !== last_debug2_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug2[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug2_expected_prev);
		$display ("     Real value = %b", debug2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_debug2_exp[14] = debug2_expected_prev[14];
	end
	if (
		( debug2_expected_prev[15] !== 1'bx ) && ( debug2_prev[15] !== debug2_expected_prev[15] )
		&& ((debug2_expected_prev[15] !== last_debug2_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug2[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug2_expected_prev);
		$display ("     Real value = %b", debug2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_debug2_exp[15] = debug2_expected_prev[15];
	end
	if (
		( debug2_expected_prev[16] !== 1'bx ) && ( debug2_prev[16] !== debug2_expected_prev[16] )
		&& ((debug2_expected_prev[16] !== last_debug2_exp[16]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug2[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug2_expected_prev);
		$display ("     Real value = %b", debug2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_debug2_exp[16] = debug2_expected_prev[16];
	end
	if (
		( debug2_expected_prev[17] !== 1'bx ) && ( debug2_prev[17] !== debug2_expected_prev[17] )
		&& ((debug2_expected_prev[17] !== last_debug2_exp[17]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug2[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug2_expected_prev);
		$display ("     Real value = %b", debug2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_debug2_exp[17] = debug2_expected_prev[17];
	end
	if (
		( debug2_expected_prev[18] !== 1'bx ) && ( debug2_prev[18] !== debug2_expected_prev[18] )
		&& ((debug2_expected_prev[18] !== last_debug2_exp[18]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug2[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug2_expected_prev);
		$display ("     Real value = %b", debug2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_debug2_exp[18] = debug2_expected_prev[18];
	end
	if (
		( debug2_expected_prev[19] !== 1'bx ) && ( debug2_prev[19] !== debug2_expected_prev[19] )
		&& ((debug2_expected_prev[19] !== last_debug2_exp[19]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug2[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug2_expected_prev);
		$display ("     Real value = %b", debug2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_debug2_exp[19] = debug2_expected_prev[19];
	end
	if (
		( debug2_expected_prev[20] !== 1'bx ) && ( debug2_prev[20] !== debug2_expected_prev[20] )
		&& ((debug2_expected_prev[20] !== last_debug2_exp[20]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug2[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug2_expected_prev);
		$display ("     Real value = %b", debug2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_debug2_exp[20] = debug2_expected_prev[20];
	end
	if (
		( debug2_expected_prev[21] !== 1'bx ) && ( debug2_prev[21] !== debug2_expected_prev[21] )
		&& ((debug2_expected_prev[21] !== last_debug2_exp[21]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug2[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug2_expected_prev);
		$display ("     Real value = %b", debug2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_debug2_exp[21] = debug2_expected_prev[21];
	end
	if (
		( debug2_expected_prev[22] !== 1'bx ) && ( debug2_prev[22] !== debug2_expected_prev[22] )
		&& ((debug2_expected_prev[22] !== last_debug2_exp[22]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug2[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug2_expected_prev);
		$display ("     Real value = %b", debug2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_debug2_exp[22] = debug2_expected_prev[22];
	end
	if (
		( debug2_expected_prev[23] !== 1'bx ) && ( debug2_prev[23] !== debug2_expected_prev[23] )
		&& ((debug2_expected_prev[23] !== last_debug2_exp[23]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug2[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug2_expected_prev);
		$display ("     Real value = %b", debug2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_debug2_exp[23] = debug2_expected_prev[23];
	end
	if (
		( Debug3_expected_prev[0] !== 1'bx ) && ( Debug3_prev[0] !== Debug3_expected_prev[0] )
		&& ((Debug3_expected_prev[0] !== last_Debug3_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Debug3[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Debug3_expected_prev);
		$display ("     Real value = %b", Debug3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Debug3_exp[0] = Debug3_expected_prev[0];
	end
	if (
		( Debug3_expected_prev[1] !== 1'bx ) && ( Debug3_prev[1] !== Debug3_expected_prev[1] )
		&& ((Debug3_expected_prev[1] !== last_Debug3_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Debug3[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Debug3_expected_prev);
		$display ("     Real value = %b", Debug3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Debug3_exp[1] = Debug3_expected_prev[1];
	end
	if (
		( Debug3_expected_prev[2] !== 1'bx ) && ( Debug3_prev[2] !== Debug3_expected_prev[2] )
		&& ((Debug3_expected_prev[2] !== last_Debug3_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Debug3[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Debug3_expected_prev);
		$display ("     Real value = %b", Debug3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Debug3_exp[2] = Debug3_expected_prev[2];
	end
	if (
		( Debug3_expected_prev[3] !== 1'bx ) && ( Debug3_prev[3] !== Debug3_expected_prev[3] )
		&& ((Debug3_expected_prev[3] !== last_Debug3_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Debug3[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Debug3_expected_prev);
		$display ("     Real value = %b", Debug3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Debug3_exp[3] = Debug3_expected_prev[3];
	end
	if (
		( Debug3_expected_prev[4] !== 1'bx ) && ( Debug3_prev[4] !== Debug3_expected_prev[4] )
		&& ((Debug3_expected_prev[4] !== last_Debug3_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Debug3[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Debug3_expected_prev);
		$display ("     Real value = %b", Debug3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Debug3_exp[4] = Debug3_expected_prev[4];
	end
	if (
		( Debug3_expected_prev[5] !== 1'bx ) && ( Debug3_prev[5] !== Debug3_expected_prev[5] )
		&& ((Debug3_expected_prev[5] !== last_Debug3_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Debug3[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Debug3_expected_prev);
		$display ("     Real value = %b", Debug3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Debug3_exp[5] = Debug3_expected_prev[5];
	end
	if (
		( Debug3_expected_prev[6] !== 1'bx ) && ( Debug3_prev[6] !== Debug3_expected_prev[6] )
		&& ((Debug3_expected_prev[6] !== last_Debug3_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Debug3[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Debug3_expected_prev);
		$display ("     Real value = %b", Debug3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Debug3_exp[6] = Debug3_expected_prev[6];
	end
	if (
		( Debug3_expected_prev[7] !== 1'bx ) && ( Debug3_prev[7] !== Debug3_expected_prev[7] )
		&& ((Debug3_expected_prev[7] !== last_Debug3_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Debug3[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Debug3_expected_prev);
		$display ("     Real value = %b", Debug3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Debug3_exp[7] = Debug3_expected_prev[7];
	end
	if (
		( Debug4_expected_prev[0] !== 1'bx ) && ( Debug4_prev[0] !== Debug4_expected_prev[0] )
		&& ((Debug4_expected_prev[0] !== last_Debug4_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Debug4[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Debug4_expected_prev);
		$display ("     Real value = %b", Debug4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Debug4_exp[0] = Debug4_expected_prev[0];
	end
	if (
		( Debug4_expected_prev[1] !== 1'bx ) && ( Debug4_prev[1] !== Debug4_expected_prev[1] )
		&& ((Debug4_expected_prev[1] !== last_Debug4_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Debug4[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Debug4_expected_prev);
		$display ("     Real value = %b", Debug4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Debug4_exp[1] = Debug4_expected_prev[1];
	end
	if (
		( Debug4_expected_prev[2] !== 1'bx ) && ( Debug4_prev[2] !== Debug4_expected_prev[2] )
		&& ((Debug4_expected_prev[2] !== last_Debug4_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Debug4[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Debug4_expected_prev);
		$display ("     Real value = %b", Debug4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Debug4_exp[2] = Debug4_expected_prev[2];
	end
	if (
		( Debug4_expected_prev[3] !== 1'bx ) && ( Debug4_prev[3] !== Debug4_expected_prev[3] )
		&& ((Debug4_expected_prev[3] !== last_Debug4_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Debug4[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Debug4_expected_prev);
		$display ("     Real value = %b", Debug4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Debug4_exp[3] = Debug4_expected_prev[3];
	end
	if (
		( Debug4_expected_prev[4] !== 1'bx ) && ( Debug4_prev[4] !== Debug4_expected_prev[4] )
		&& ((Debug4_expected_prev[4] !== last_Debug4_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Debug4[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Debug4_expected_prev);
		$display ("     Real value = %b", Debug4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Debug4_exp[4] = Debug4_expected_prev[4];
	end
	if (
		( Debug4_expected_prev[5] !== 1'bx ) && ( Debug4_prev[5] !== Debug4_expected_prev[5] )
		&& ((Debug4_expected_prev[5] !== last_Debug4_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Debug4[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Debug4_expected_prev);
		$display ("     Real value = %b", Debug4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Debug4_exp[5] = Debug4_expected_prev[5];
	end
	if (
		( Debug4_expected_prev[6] !== 1'bx ) && ( Debug4_prev[6] !== Debug4_expected_prev[6] )
		&& ((Debug4_expected_prev[6] !== last_Debug4_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Debug4[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Debug4_expected_prev);
		$display ("     Real value = %b", Debug4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Debug4_exp[6] = Debug4_expected_prev[6];
	end
	if (
		( Debug4_expected_prev[7] !== 1'bx ) && ( Debug4_prev[7] !== Debug4_expected_prev[7] )
		&& ((Debug4_expected_prev[7] !== last_Debug4_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Debug4[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Debug4_expected_prev);
		$display ("     Real value = %b", Debug4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Debug4_exp[7] = Debug4_expected_prev[7];
	end
	if (
		( F_expected_prev[0] !== 1'bx ) && ( F_prev[0] !== F_expected_prev[0] )
		&& ((F_expected_prev[0] !== last_F_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port F[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", F_expected_prev);
		$display ("     Real value = %b", F_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_F_exp[0] = F_expected_prev[0];
	end
	if (
		( F_expected_prev[1] !== 1'bx ) && ( F_prev[1] !== F_expected_prev[1] )
		&& ((F_expected_prev[1] !== last_F_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port F[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", F_expected_prev);
		$display ("     Real value = %b", F_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_F_exp[1] = F_expected_prev[1];
	end
	if (
		( F_expected_prev[2] !== 1'bx ) && ( F_prev[2] !== F_expected_prev[2] )
		&& ((F_expected_prev[2] !== last_F_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port F[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", F_expected_prev);
		$display ("     Real value = %b", F_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_F_exp[2] = F_expected_prev[2];
	end
	if (
		( F_expected_prev[3] !== 1'bx ) && ( F_prev[3] !== F_expected_prev[3] )
		&& ((F_expected_prev[3] !== last_F_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port F[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", F_expected_prev);
		$display ("     Real value = %b", F_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_F_exp[3] = F_expected_prev[3];
	end
	if (
		( F_expected_prev[4] !== 1'bx ) && ( F_prev[4] !== F_expected_prev[4] )
		&& ((F_expected_prev[4] !== last_F_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port F[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", F_expected_prev);
		$display ("     Real value = %b", F_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_F_exp[4] = F_expected_prev[4];
	end
	if (
		( F_expected_prev[5] !== 1'bx ) && ( F_prev[5] !== F_expected_prev[5] )
		&& ((F_expected_prev[5] !== last_F_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port F[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", F_expected_prev);
		$display ("     Real value = %b", F_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_F_exp[5] = F_expected_prev[5];
	end
	if (
		( F_expected_prev[6] !== 1'bx ) && ( F_prev[6] !== F_expected_prev[6] )
		&& ((F_expected_prev[6] !== last_F_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port F[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", F_expected_prev);
		$display ("     Real value = %b", F_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_F_exp[6] = F_expected_prev[6];
	end
	if (
		( F_expected_prev[7] !== 1'bx ) && ( F_prev[7] !== F_expected_prev[7] )
		&& ((F_expected_prev[7] !== last_F_exp[7]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port F[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", F_expected_prev);
		$display ("     Real value = %b", F_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_F_exp[7] = F_expected_prev[7];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module ex1_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg clr;
// wires                                               
wire [7:0] debug1;
wire [23:0] debug2;
wire [0:7] Debug3;
wire [7:0] Debug4;
wire [0:7] F;

wire sampler;                             

// assign statements (if any)                          
ex1 i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.clr(clr),
	.debug1(debug1),
	.debug2(debug2),
	.Debug3(Debug3),
	.Debug4(Debug4),
	.F(F)
);

// clk
always
begin
	clk = 1'b0;
	clk = #20000 1'b1;
	#20000;
end 

// clr
initial
begin
	clr = 1'b1;
end 

ex1_vlg_sample_tst tb_sample (
	.clk(clk),
	.clr(clr),
	.sampler_tx(sampler)
);

ex1_vlg_check_tst tb_out(
	.debug1(debug1),
	.debug2(debug2),
	.Debug3(Debug3),
	.Debug4(Debug4),
	.F(F),
	.sampler_rx(sampler)
);
endmodule

